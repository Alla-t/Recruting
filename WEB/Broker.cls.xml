<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="WEB.Broker">
<Description>
Обработка веб запросов и их 
распределение по соответствующим классам и методам</Description>
<Super>%CSP.REST</Super>
<TimeCreated>63004,63366.300975</TimeCreated>

<UDLText name="T">
<Content><![CDATA[
// TODO: необходимо настроить роутинг на изменения таким образом что бы он вызывал универсальные методы

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// 	   <Route Url="/json/vacancies/:isAdm" 	Method="GET" Call="WEB.JSON:GetVacancies"/>

]]></Content>
</UDLText>

<XData name="UrlMap">
<Data><![CDATA[
<Routes>

 		<!--Авторизация через куки-->
       <Route Url="/json/authVerifyCookie/:cookie" 	Method="GET" Call="WEB.JSON:AuthVerifyByCookie"/> 
       
       
       
	   <Route Url="/temp" 					Method="GET" Call="WEB.JSON:DefaultTemplate"/> 
	   
	   <Route Url="/test/:cookie" 					Method="GET" Call="WEB.JSON:AuthVerifyByCookie"/> 
	   
	   <Route Url="/json/vacancies/:isAdm" 	Method="GET" Call="WEB.JSON:GetVacancies"/>
	   <Route Url="/json/vacanciesByComp/:compid" Method="GET" Call="WEB.JSON:GetVacanciesByCompID"/> 
	   <Route Url="/json/vacanciesold" 		Method="GET" Call="WEB.JSON:GetVacanciesOld"/> 
	   <Route Url="/json/vacancy/:compid" 	Method="GET" Call="WEB.JSON:GetVacancy"/> 
	   
	   
	   
	   
	   
	  
	   <Route Url="/json/company/:compid" 	Method="GET" Call="WEB.JSON:GetCompany"/> 
	   <Route Url="/json/companies" 		Method="GET" Call="WEB.JSON:GetAllCompanies"/>
	   <Route Url="/json/comvac" 			Method="GET" Call="WEB.JSON:GetCompaniesVacancies"/>
	   <Route Url="/json/authVerify/:authLogin/:authPassword" Method="GET" Call="WEB.JSON:AuthVerify"/> 
	  
	   <Route Url="/json/LoginOut/:session" 				Method="POST" Call="WEB.JSON:LoginOut"/>  
	   
	   <!-- перехват страницы:
	   Route Url="/json/v/:compid" 			Method="PUT" Call="WEB.TestJSON:OnPage"/-->
	   <Route Url="/json/candv/:compid" 	Method="GET" Call="WEB.JSON:GetVacancyAndCompany"/> 
	   <Route Url="/json/forwidget" 	Method="GET" Call="WEB.JSON:GetForWidget"/> 

	   <Route Url="/json/rss/" 				Method="GET" Call="WEB.RSS:OnPage"/>
	   

 	<Route Url="/json/vacancyresp/:compid" 		 		Method="POST" Call="WEB.JSON:NVR"/>
	  
	  
	   <Route Url="/json/getallcompanysr/" 		  Method="GET" Call="WEB.JSON:getallcompanys"/>
	  
	   <Route Url="/json/getcompanyr/:compid" 	  Method="GET" Call="WEB.JSON:companyGet"/>
	   

	 
	   
	   <Route Url="/json/getcountvacancyview/:vacid" 		Method="GET" Call="WEB.JSON:GetCountVacancyView"/>
	  
	   
	 
	 
	</Routes>
]]></Data>
</XData>

<Method name="Test">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	&html<<h1>Работает?!</h1>>
	&html<<h1>Работает!!!</h1>>
	quit $$$OK
]]></Implementation>
</Method>

<Method name="Http404">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	&html<<font size = "20pt">404</font><h1>Работает?!</h1>>
	&html<<h1>А НЕФИГА не Работает!!! :P </h1>>
	&html<<h1>(всё нормуль просто данный адресс не существует)</h1>>
	quit $$$OK
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
/*
/// Dispatch a REST request according to URL and Method
ClassMethod DispatchRequest(pUrl As %String, pMethod As %String) As %Status
{
    #dim tSC As %Status = $$$OK
    #dim e As %Exception.AbstractException
    
    #dim tMatcher As %Regex.Matcher
    
    #dim tArgs,tClass,tMatchUrl,tRegEx,tTarget,tAccess As %String
    #dim tI,tIndex As %Integer
    #dim tResourceMatched As %Boolean = 0
    #dim tMethodMatched As %Boolean = 0
    
    #; Example: ^ISC.REST.UrlMap(classname,"/udl/(.?)","GET") = GetClassText"
    Try {
        #; Check that the effective user ( could be unknown user ) can access this resource
        Set tAccess=$SYSTEM.Security.Check($Piece($zu(90,21,$namespace),"^",4))
        If tAccess'["READ,WRITE"
        {
            #; Don't want the session token
            Set %response.OutputSessionToken=0
            
            #; Set the Http Status
            Set %response.Status="401 Unauthorized"
        
            #; Write out the header
            Do %response.WriteHTTPHeader()
            
            #; Done
            Quit
        }
        
        #; Walk the dispatch map in collation order of defintion
        Set tIndex="" For {
            
            #; Get the next index
            Set tIndex=$Order(^ISC.REST.UrlMap($classname(),tIndex)) If tIndex="" Quit
                
            #; Pick out the RegEx
            Set tRegEx=$Order(^ISC.REST.UrlMap($classname(),tIndex,""))
            
            #; Create a matcher
            Set tMatcher=##class(%Regex.Matcher).%New(tRegEx)
                
            #; Extract the match url from the application name
            Set tMatchUrl="/"_$Extract(pUrl,$Length(%request.Application)+1,*)
                 
            #; Test each regular expression in turn, extracting the arguments,
            #; dispatching to the named method  
            If tMatcher.Match(tMatchUrl) {
                
                #; We have matched the resource
                Set tResourceMatched=1
                
                #; Now check method name
                Set tTarget=$Get(^ISC.REST.UrlMap($classname(),tIndex,tRegEx,pMethod))
                
                #; No match on method name, retry next
                If tTarget="" Continue
                
                #; We have matched a method
                Set tMethodMatched=1
                
                #; Got a match, marshall the arguments
                If tMatcher.GroupCount {
                    For tI=1:1:tMatcher.GroupCount Set tArgs(tI)=tMatcher.Group(tI)
                    Set tArgs=tI
                } else {
                    Set tArgs=0
                }
                
                #; Check for optional ClassName prefix
                Set tClass=$classname()
                If tTarget[":" Set tClass=$Piece(tTarget,":"),tTarget=$Piece(tTarget,":",2)
                
                #; Dispatch
                #; Пробуем сделать свой 
                w "omg ((("
                if ##class(WEB.JSON).CookieControl() {
	                w "oh no ((("
                Set tSC=$zobjclassmethod(tClass,tTarget,tArgs...)
                If $$$ISERR(tSC) Do ..Http500(##class(%Exception.StatusException).CreateFromStatus(tSC))
                }
                else {
	                w "Yearr!!!"
	                }
                #; Don't want multiple matches
                Quit
            }
        }
        
        #; Didn't have a match for the resource, report not found
        If tResourceMatched=0 Set tSC=..Http404() Quit
        
        #; Had a match for resource but method not matched
        If tMethodMatched=0 Set tSC=..Http405() Quit
            
    } Catch (e) {
        
        #; Issue a '500'
        Do ..Http500(e)
    }
    
    Set %session.EndSession=('..#UseSession)
    
    Quit tSC
}
*/
]]></Content>
</UDLText>
</Class>
</Export>
