<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="WEB.JSON">
<Description>
Обработка запросов к/от базы</Description>
<Super>%Base,%RegisteredObject,%CSP.Request,%CSP.Response</Super>
<TimeCreated>63004,63548.548932</TimeCreated>

<Method name="DefaultTemplate">
<Description>
Шаблон административной страницы</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  set st=$$$OK
   &html<<h1>DefaultTemplate() Empty page <b> block </b></h1>>  
   
  quit st
]]></Implementation>
</Method>

<Method name="ReDirectMail">
<Description>
Отправка </Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>vrID:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st= ##class(Vacancy.CreateMail).ReDirectMail(vrID)
	set a =##class(Vacancy.CreateMail).%OpenId(vrID)
	set a.Status="true"
	do a.%Save()
	

	
	q $system.OBJ.DisplayError(st)
]]></Implementation>
</Method>

<Method name="DeleteVacancyResponse">
<ClassMethod>1</ClassMethod>
<FormalSpec>vrid:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	
	do ##class(Vacancy.VacancyResponse).%DeleteId(vrid)
	do ##class(Vacancy.CreateMail).%DeleteId(vrid)

	q $$$OK
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// -------------Start VacancyView---------------------

]]></Content>
</UDLText>

<Method name="GetCountVacancyView">
<ClassMethod>1</ClassMethod>
<FormalSpec>vacid:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[

	set vacQuery = "SELECT Count(*) "_
				   "FROM Vacancy.VacancyView AS V "_
				   "WHERE V.Vacancy="_vacid
				   
	do ##class(WEB.JSON).GetJSONData(vacQuery)

	quit $$$OK
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// -------------End VacancyView-----------------------

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// -------------Company-----------------------

]]></Content>
</UDLText>

<Method name="companyCreate">
<Description>
Добавление новой компании</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	
	   set st=$$$OK
	   
	   if (st=$$$OK) {
 
   try{
	   $$$THROWONERROR(st,##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.obj,1))
       
      set com=##class(Vacancy.Company).%New()
      set com.Name=$ZCONVERT(obj.CompanyName,"I","UTF8")
      set com.Adress.Country=$ZCONVERT(obj.Country,"I","UTF8")
      set com.Adress.State=$ZCONVERT(obj.State,"I","UTF8")
      set com.Adress.City=$ZCONVERT(obj.City,"I","UTF8")
      set com.Adress.Street=$ZCONVERT(obj.Street,"I","UTF8")
      set com.Adress.Building=$ZCONVERT(obj.Building,"I","UTF8")
      set com.Adress.Apartament=$ZCONVERT(obj.Apartament,"I","UTF8")
      set com.Adress.Email=$ZCONVERT(obj.Email,"I","UTF8")
      set com.Adress.Telephone=$ZCONVERT(obj.Telephone,"I","UTF8")
      set com.Adress.URL=$ZCONVERT(obj.URL,"I","UTF8")
      set com.CompMainInfo=$ZCONVERT(obj.CompMainInfo,"I","UTF8")
      set com.CompanyCurrency=$ZCONVERT(obj.CompanyCurrency,"I","UTF8")
	  set com.IsModerated=obj.IsModerated
	  


       $$$THROWONERROR(st,com.%Save())
 
	//  set com.Name = com.%Id 
 
   } catch ex{set st=ex.AsStatus()}
	   }
    quit st
]]></Implementation>
</Method>

<Method name="Companyupdate">
<Description>
Обновление компании</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>compid:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	
	   set st=$$$OK
 
 	   if (st=$$$OK) {
   try{
	   $$$THROWONERROR(st,##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.obj,1))
       
      set com=##class(Vacancy.Company).%OpenId(compid)
      set com.Name=$ZCONVERT(obj.CompanyName,"I","UTF8")
      set com.Adress.Country=$ZCONVERT(obj.Country,"I","UTF8")
      set com.Adress.State=$ZCONVERT(obj.State,"I","UTF8")
      set com.Adress.City=$ZCONVERT(obj.City,"I","UTF8")
      set com.Adress.Street=$ZCONVERT(obj.Street,"I","UTF8")
      set com.Adress.Building=$ZCONVERT(obj.Building,"I","UTF8")
      set com.Adress.Apartament=$ZCONVERT(obj.Apartament,"I","UTF8")
      set com.Adress.Email=$ZCONVERT(obj.Email,"I","UTF8")
      set com.Adress.Telephone=$ZCONVERT(obj.Telephone,"I","UTF8")
      set com.Adress.URL=$ZCONVERT(obj.URL,"I","UTF8")
      set com.CompMainInfo=$ZCONVERT(obj.CompMainInfo,"I","UTF8")
	  set com.IsModerated=obj.IsModerated
      set com.CompanyCurrency=$ZCONVERT(obj.CompanyCurrency,"I","UTF8")
      
       $$$THROWONERROR(st,com.%Save())
 
   } catch ex{set st=ex.AsStatus()} }
    quit st
]]></Implementation>
</Method>

<Method name="delCompany">
<Description>
Удалить компанию из БД</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>compid:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	
	q ##class(Vacancy.Company).DeleteCompany(compid)
]]></Implementation>
</Method>

<Method name="companyGet">
<Description>
компания</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>compid:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set vacQuery = "SELECT C.Name AS CompanyName, C.IsModerated, C.Adress_Apartament AS Apartament, C.Adress_Building AS Building, "_
	              "C.Adress_City AS City, C.Adress_Country AS Country, C.Adress_Email AS Email, C.Adress_State AS State, "_
	               "C.Adress_Street AS Street, C.Adress_Telephone AS Telephone, C.CompanyCurrency, "_
	               "C.Adress_URL AS URL, C.ID,  C.CompMainInfo "_
				   "FROM Vacancy.Company AS C "_
				   "WHERE C.ID="_compid
				   
	do ##class(WEB.JSON).GetJSONData(vacQuery)
	quit $$$OK
]]></Implementation>
</Method>

<Method name="getallcompanys">
<Description>
список компаний</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set vacQuery = "SELECT C.Name AS CompanyName, C.CompMainInfo, C.Adress_Apartament AS Apartament, C.Adress_Building AS Building,"_
	               "C.Adress_City AS City, C.Adress_Country AS Country, C.Adress_Email AS Email, C.Adress_State AS State,"_
	               "C.Adress_Street AS Street, C.Adress_Telephone AS Telephone, C.Adress_URL AS URL, C.ID AS IDComp "_
				   "FROM Vacancy.Company AS C"
				   
	do ##class(WEB.JSON).GetJSONData(vacQuery)
	quit $$$OK
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// -------------End company-------------------

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// -------------System Users-----------------------

]]></Content>
</UDLText>

<Method name="CreateSystemUsers">
<Description>
Добавление нового пользователя</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	
	   set st=$$$OK
	  
   try{
	   $$$THROWONERROR(st,##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.obj,1))
       
      set su=##class(Vacancy.SystemUser).%New()
      set su.FirstName=$ZCONVERT(obj.FirstName,"I","UTF8")
      set su.LastName=$ZCONVERT(obj.LastName,"I","UTF8")
      set su.DOB=obj.DOB
      set su.Sex=$ZCONVERT(obj.Sex,"I","UTF8")
      set su.HomeAdress.Apartament=$ZCONVERT(obj.Apartament,"I","UTF8")
      set su.HomeAdress.Building=$ZCONVERT(obj.Building,"I","UTF8")
      set su.HomeAdress.City=$ZCONVERT(obj.City,"I","UTF8")
      set su.HomeAdress.Country=$ZCONVERT(obj.Country,"I","UTF8")
      set su.HomeAdress.Email=$ZCONVERT(obj.Email,"I","UTF8")
      set su.HomeAdress.State=$ZCONVERT(obj.State,"I","UTF8")
      set su.HomeAdress.Street=$ZCONVERT(obj.Street,"I","UTF8")
      set su.HomeAdress.Telephone=$ZCONVERT(obj.Telephone,"I","UTF8")
      set su.HomeAdress.URL=$ZCONVERT(obj.URL,"I","UTF8")
      set su.Login=$ZCONVERT(obj.Login,"I","UTF8")
      set su.Password=$system.Encryption.MD5Hash($ZCONVERT(obj.Password,"I","UTF8"))
      set su.Salt=$RANDOM(1000)
     
       $$$THROWONERROR(st,su.%Save())
 
   } catch ex{set st=ex.AsStatus()}
    quit st
]]></Implementation>
</Method>

<Method name="UpdateSystemUsers">
<Description>
Обновление пользователя</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>compid:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	
	   set st=$$$OK
	   
   try{
	   $$$THROWONERROR(st,##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.obj,1))
       
      set su=##class(Vacancy.SystemUser).%OpenId(compid)
      
      set su.FirstName=$ZCONVERT(obj.FirstName,"I","UTF8")
      set su.LastName=$ZCONVERT(obj.LastName,"I","UTF8")
     // set su.DOB=obj.DOB
      set su.Sex=$ZCONVERT(obj.Sex,"I","UTF8")
      set su.HomeAdress.Apartament=$ZCONVERT(obj.Apartament,"I","UTF8")
      set su.HomeAdress.Building=$ZCONVERT(obj.Building,"I","UTF8")
      set su.HomeAdress.City=$ZCONVERT(obj.City,"I","UTF8")
      set su.HomeAdress.Country=$ZCONVERT(obj.Country,"I","UTF8")
      set su.HomeAdress.Email=$ZCONVERT(obj.Email,"I","UTF8")
      set su.HomeAdress.State=$ZCONVERT(obj.State,"I","UTF8")
      set su.HomeAdress.Street=$ZCONVERT(obj.Street,"I","UTF8")
      set su.HomeAdress.Telephone=$ZCONVERT(obj.Telephone,"I","UTF8")
      set su.HomeAdress.URL=$ZCONVERT(obj.URL,"I","UTF8")
      set su.Login=$ZCONVERT(obj.Login,"I","UTF8")
      //set su.Salt=$RANDOM(1000)
      
      
      if (obj.Password'=""){
      set su.Password=$system.Encryption.MD5Hash($ZCONVERT(obj.Password,"I","UTF8"))}
     
     
       $$$THROWONERROR(st,su.%Save())
 
   } catch ex{set st=ex.AsStatus()}
    quit st
]]></Implementation>
</Method>

<Method name="DeleteSystemUsers">
<Description>
Удаление пользователя</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>compid:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	
	set st=##class(Vacancy.SystemUser).%DeleteId(compid)
    quit st
]]></Implementation>
</Method>

<Method name="GetSystemUser">
<Description>
пользователь</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>compid:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[

	set vacQuery = "SELECT V.FirstName, V.LastName, V.HomeAdress_City AS City, V.HomeAdress_Country AS Country, "_
	               "HomeAdress_Apartament AS Apartament, V.HomeAdress_Building AS Building, V.Login, "_ 
	               "V.HomeAdress_Email AS Email, V.HomeAdress_State AS State, V.HomeAdress_Street AS Street,"_
	               "V.HomeAdress_Telephone AS Telephone, V.HomeAdress_URL AS URL,"_
					      "V.ID AS IDUser, V.DOB, V.Sex, V.UserType "_ 
				   "FROM Vacancy.SystemUser AS V "_
				   "WHERE V.ID="_compid
				   
				 
	do ##class(WEB.JSON).GetJSONData(vacQuery)
	quit $$$OK
]]></Implementation>
</Method>

<Method name="GetAllSystemUsers">
<Description>
список пользователей</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[

	set vacQuery = "SELECT V.FirstName, V.LastName, V.HomeAdress_City AS City, V.HomeAdress_Country AS Country, "_
	               "HomeAdress_Apartament AS Apartament, V.HomeAdress_Building AS Building,"_ 
	               "V.HomeAdress_Email AS Email, V.HomeAdress_State AS State, V.HomeAdress_Street AS Street,"_
	               "V.HomeAdress_Telephone AS Telephone, V.HomeAdress_URL AS URL,"_ 
					      "V.ID AS IDUser, V.DOB, V.Sex, V.UserType "_ 
				   "FROM Vacancy.SystemUser AS V "
				 
	do ##class(WEB.JSON).GetJSONData(vacQuery)
	quit $$$OK
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// -------------End system Users-------------------

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// -------------VACANCY RESPONSE-----------------------

]]></Content>
</UDLText>

<Method name="GetCountVacancyResponse">
<ClassMethod>1</ClassMethod>
<FormalSpec>vacid:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	
	set vacQuery = "SELECT Count(*) "_
				   "FROM Vacancy.VacancyResponse AS V "_
				   "WHERE V.Vacancy="_vacid
				   
	do ##class(WEB.JSON).GetJSONData(vacQuery)
	quit $$$OK
]]></Implementation>
</Method>

<Method name="GetVacancyResponse">
<ClassMethod>1</ClassMethod>
<FormalSpec>vacid:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	
		
	set addToQuery = ""
	
	// попробуем считать значение переменной, если не получилось считать - вернет пустую строку
	set temp = $GET(vacid)  
	if (temp '= "") {
		 // если задан ИД для вакансии - зададим условие выбора по ИД 
		 set addToQuery = "WHERE V.Vacancy="_vacid
 } 
 		
				  
	set vacQuery = "SELECT V.ID, VV.Name AS VacancyName, VK.Name AS CompanyName, VK.ID AS Company, V.FirstName, V.Skype, CM.Status, V.LastName, V.ResponseDate, V.ResponseText, From_Apartament AS Apartament,"_
	               "From_Building AS Building, From_City AS City, From_Country AS Country, From_Email AS Email, "_
	               "From_State AS State, From_Street AS Street, From_Telephone AS Telephone, From_URL AS URL, V.Vacancy "_
				   "FROM Vacancy.VacancyResponse AS V "_
				   "INNER JOIN Vacancy.CreateMail AS CM ON V.ID=CM.ID "_
				   "INNER JOIN Vacancy.Vacancy AS VV ON V.Vacancy=VV.ID "_
				   "INNER JOIN Vacancy.Company AS VK ON VV.Company=VK.ID  "_
				    addToQuery_" ORDER BY V.ResponseDate DESC"

	
	do ##class(WEB.JSON).GetJSONData(vacQuery)

 quit $$$OK
]]></Implementation>
</Method>

<Method name="NVR">
<Description>
Добавить отзыв</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>compid:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	
	   set st=$$$OK
   try{
	   $$$THROWONERROR(st,##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.obj,1))
       
       set vr=##class(Vacancy.VacancyResponse).%New()
       set vacancy=##class(Vacancy.Vacancy).%OpenId(compid)
       //#dim a as %StringTimeStamp

       set vr.Vacancy=vacancy
       //set obj=$ZCONVERT(obj,"I","UTF8")
       set vr.FirstName=$ZCONVERT(obj.FirstName,"I","UTF8")
       
       set vr.LastName=$ZCONVERT(obj.LastName,"I","UTF8")
       set vr.From.Country=$ZCONVERT(obj.Country,"I","UTF8")
       set vr.From.State=$ZCONVERT(obj.State,"I","UTF8")
       set vr.From.City=$ZCONVERT(obj.City,"I","UTF8")
       set vr.From.Street=$ZCONVERT(obj.Street,"I","UTF8")
       set vr.From.Building=$ZCONVERT(obj.Building,"I","UTF8")
       set vr.From.Apartament=$ZCONVERT(obj.Apartament,"I","UTF8")
       set vr.From.Email=$ZCONVERT(obj.Email,"I","UTF8")
       set vr.From.Telephone=$ZCONVERT(obj.Telephone,"I","UTF8")
       set vr.Skype=$ZCONVERT(obj.Skype,"I","UTF8")
       //set vr.ResponseDate=##class(%Library.TimeStamp).OdbcToLogical($h)
       set vr.ResponseDate=$piece($H, ",")
       set vr.ResponseText=$ZCONVERT(obj.ResponseText,"I","UTF8") 
       set SM=##class(Vacancy.CreateMail).%New()
       set SM.Status="false"
       do SM.%Save()
       
       $$$THROWONERROR(st,vr.%Save())
 	
 
   } catch ex{set st=ex.AsStatus()}
   
   		
    quit st
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// ------------- END VACANCY RESPONSE-----------------------

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// -------------VACANCY BEGIN-----------------------

]]></Content>
</UDLText>

<Method name="CreateVacancy">
<Description>
Добавить вакансию</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
		   set st=$$$OK
  
   try{
	   $$$THROWONERROR(st,##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.obj,1))
       
       set vacancy=##class(Vacancy.Vacancy).%New()
       set vacancy.Name=$ZCONVERT(obj.VacancyName,"I","UTF8")
       set vacancy.Skills=$ZCONVERT(obj.Skills,"I","UTF8")
       set vacancy.VacancyType=$ZCONVERT(obj.VacancyType,"I","UTF8")
       set vacancy.EduLevel=$ZCONVERT(obj.EduLevel,"I","UTF8")
       set vacancy.Institution=$ZCONVERT(obj.Institution,"I","UTF8")
       set vacancy.StartSalary=$ZCONVERT(obj.StartSalary,"I","UTF8")
       set vacancy.EndSalary=$ZCONVERT(obj.EndSalary,"I","UTF8")
       set vacancy.RegDate=$ZDATETIME($NOW(),3,1,1)
       set vacancy.CityVacancy=$ZCONVERT(obj.CityVacancy,"I","UTF8")
       set vacancy.MainInfo=$ZCONVERT(obj.MainInfo,"I","UTF8")
       set vacancy.AddInfo=$ZCONVERT(obj.AddInfo,"I","UTF8")
       set vacancy.Seats=$ZCONVERT(obj.Seats,"I","UTF8")
       set vacancy.Company=##class(Vacancy.Company).%OpenId(obj.comid)
       set vacancy.Links.URL=$ZCONVERT(obj.URL,"I","UTF8")
       set vacancy.VacancyCurrency=$ZCONVERT(obj.VacancyCurrency,"I","UTF8")
       set compimg=##class(Vacancy.Company).%OpenId(obj.comid)
       do vacancy.Img.CopyFromAndSave(compimg.Img)
       
              
       $$$THROWONERROR(st,vacancy.%Save())
 
   } catch ex{set st=ex.AsStatus()}
    quit st
]]></Implementation>
</Method>

<Method name="DeleteVacancy">
<Description>
Удалить вакансию</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>compid:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
   set st=$$$OK

   try{$$$THROWONERROR(st,##class(Vacancy.Vacancy).%DeleteId(compid))} 
   catch ex{set st=ex.AsStatus()}
   quit st
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// Обновить вакансию

]]></Content>
</UDLText>

<Method name="UpdateVacancy">
<ClassMethod>1</ClassMethod>
<FormalSpec>compid:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	   set st=$$$OK
  
   try{
	   $$$THROWONERROR(st,##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.obj,1))
       
       set vacancy=##class(Vacancy.Vacancy).%OpenId(compid)
      
       set vacancy.Name=$ZCONVERT(obj.VacancyName,"I","UTF8")
       set vacancy.Skills=$ZCONVERT(obj.Skills,"I","UTF8")
       set vacancy.VacancyType=$ZCONVERT(obj.VacancyType,"I","UTF8")
       set vacancy.EduLevel=$ZCONVERT(obj.EduLevel,"I","UTF8")
       set vacancy.Institution=$ZCONVERT(obj.Institution,"I","UTF8")
       set vacancy.StartSalary=$ZCONVERT(obj.StartSalary,"I","UTF8")
       set vacancy.EndSalary=$ZCONVERT(obj.EndSalary,"I","UTF8")
       //set vacancy.RegDate=$piece($H, ",")
       set vacancy.CityVacancy=$ZCONVERT(obj.CityVacancy,"I","UTF8")
       set vacancy.MainInfo=$ZCONVERT(obj.MainInfo,"I","UTF8")
       set vacancy.AddInfo=$ZCONVERT(obj.AddInfo,"I","UTF8")
       set vacancy.Seats=$ZCONVERT(obj.Seats,"I","UTF8")
       set vacancy.Company=##class(Vacancy.Company).%OpenId(obj.compID)
       set vacancy.VacancyCurrency=$ZCONVERT(obj.VacancyCurrency,"I","UTF8")
       
       set vacancy.Links.URL=$ZCONVERT(obj.URL,"I","UTF8")
 /*
  заблокируем, пока, изменение картинки       
       set compimg=##class(Vacancy.Company).%OpenId(obj.compID)
       do vacancy.Img.CopyFromAndSave(compimg.Img)
 */
       $$$THROWONERROR(st,vacancy.%Save())
 
   } catch ex{set st=ex.AsStatus()}
    quit st
]]></Implementation>
</Method>

<Method name="GetVacanciesOld">
<Description>
список вакансий старый</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	do ##class(WEB.JSON).GetJSONData("select *from Vacancy.Vacancy")
	quit $$$OK
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// а это закоментарено недовольными ламерами. Ламеров - на курсы SQL (или можно хотя бы спросить что к чему)!!!

]]></Content>
</UDLText>

<Method name="GetVacancies">
<Description>
список вакансий</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>isAdm:%Boolean</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	if (isAdm){
		// Админский запрос -[Этот жуткий запрос создан гуру SQL!]
		set vacQuery = "SELECT V.name, V.IsActive, C.Name AS CompanyName, V.ID, nvl(SUM(d.cou_view),0) AS CountView, nvl(SUM(d.cou_resp),0) AS CountResp, "_
					   "V.CityVacancy, V.VacancyType, V.ID AS IDVac, V.Name AS VacancyName, V.RegDate, V.StartSalary, V.EndSalary, V.VacancyCurrency "_  
					   "FROM "_
					   "(SELECT  VV.Vacancy, Count(VV.ID) as cou_view,0 as cou_resp "_
					   "FROM Vacancy.VacancyView AS VV GROUP BY VV.Vacancy "_
					   "UNION ALL "_
					   "SELECT  VR.Vacancy, 0 as cou_view,Count(VR.ID)as cou_resp "_
					   "FROM Vacancy.VacancyResponse AS VR GROUP BY VR.Vacancy) d "_
					   "RIGHT OUTER JOIN  vacancy.vacancy V ON V.ID = d.Vacancy "_
					   "INNER JOIN Vacancy.Company AS C ON V.Company=C.ID "_  
					   "GROUP BY D.Vacancy, V.Name "_
					   "ORDER BY V.RegDate DESC"
	}
	else{
		// если это не админский запрос
		set vacQuery = "SELECT  Count(VV.ID) AS CountView, Count(VR.ID) AS CountResp, C.Name AS CompanyName, V.CityVacancy, V.VacancyType, "_ 
					           "V.ID AS IDVac, V.Name AS VacancyName, V.RegDate, V.StartSalary, V.EndSalary, V.VacancyCurrency "_ 
					   "FROM Vacancy.Vacancy AS V "_
					   "INNER JOIN Vacancy.Company AS C ON V.Company=C.ID "_
					   "LEFT OUTER JOIN Vacancy.VacancyView AS VV  ON V.ID=VV.Vacancy  "_
					   "LEFT OUTER JOIN Vacancy.VacancyResponse AS VR ON V.ID=VR.Vacancy "_
					   "WHERE V.IsActive = 1 "_
					   "GROUP BY V.ID "_
					   "ORDER BY V.RegDate DESC"	
	}
	do ##class(WEB.JSON).GetJSONData(vacQuery)
	quit $$$OK
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
/*				   
		set vacQuery = "SELECT  Count(VV.ID) AS CountView, Count(VR.ID) AS CountResp, C.Name AS CompanyName, V.CityVacancy, V.VacancyType, "_ 
					   "V.ID AS IDVac, V.Name AS VacancyName, V.RegDate, V.StartSalary, V.EndSalary, V.VacancyCurrency "_ 
					   "FROM Vacancy.Vacancy AS V "_
					   "INNER JOIN Vacancy.Company AS C ON V.Company=C.ID "_
					   "LEFT OUTER JOIN Vacancy.VacancyView AS VV  ON V.ID=VV.Vacancy  "_
					   "LEFT OUTER JOIN Vacancy.VacancyResponse AS VR ON V.ID=VR.Vacancy "_
					   "WHERE V.IsActive = 1 "_
					   "GROUP BY V.ID "_
					   "ORDER BY V.RegDate DESC"	
	do ##class(WEB.JSON).GetJSONData(vacQuery)
	
} */
]]></Content>
</UDLText>

<Method name="GetForWidget">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
			&sql(SELECT MAX(ID) into:maxid FROM Vacancy.Vacancy)
			&sql(SELECT COUNT(ID) into:rowcnt FROM Vacancy.Vacancy WHERE IsActive = 1 )
			
			set Str = "("
			for i=1:1:rowcnt {
					set rand = $RANDOM(maxid)
					
					if (i < rowcnt) {	
						set Str = Str_rand_"," 
					}
					else{
						set Str = Str_rand 	
					}
					
			}
			set Str = Str_")"
			
			set vacQuery = "SELECT TOP 6 V.VacancyType, "_ 
					       "V.ID AS IDVac, V.Name AS VacancyName, V.RegDate "_ 
					   "FROM Vacancy.Vacancy AS V "_
					   "WHERE V.IsActive = 1 AND "_
					   		  "V.ID IN "_Str_  	
					   " ORDER BY V.RegDate DESC"	
					   
					   w vacQuery 
			/*set vacQuery = "SELECT TOP 1 *"_  
					   "FROM Vacancy.Vacancy "_
					   "WHERE  Vacancy.Vacancy.IsActive = 1 "_
					   "ORDER BY  Vacancy.Vacancy.RegDate DESC "	
*/
	do ##class(WEB.JSON).GetJSONData(vacQuery)
	quit $$$OK
]]></Implementation>
</Method>

<Method name="GetVacanciesByCompID">
<Description>
список вакансий</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>compID</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set vacQuery = "SELECT C.Name AS CompanyName, V.CityVacancy, V.VacancyType, "_ 
					      "V.ID AS IDVac, V.Name AS VacancyName, V.RegDate, V.StartSalary, V.EndSalary "_ 
				   "FROM Vacancy.Vacancy AS V "_
				   "INNER JOIN Vacancy.Company AS C ON V.Company=C.ID "_
				   "WHERE C.ID="_compID_" AND V.IsActive = 1"_ 
				   "ORDER BY V.Company "
				  
				   
	do ##class(WEB.JSON).GetJSONData(vacQuery)
	quit $$$OK
]]></Implementation>
</Method>

<Method name="GetVacancy">
<Description>
список вакансий</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>compid:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	/*
  set vacQuery = "SELECT C.Name AS CompanyName,  ,"_
  						 " C.CompMainInfo, V.CityVacancy, V.Skills, V.Links_URL AS URL, "_ 
					     "V.ID AS IDVac, V.VacancyType, V.Name AS VacancyName, V.RegDate, V.StartSalary, V.EndSalary, "_ 
					     "V.MainInfo, V.Institution, V.AddInfo,V.EduLevel, V.Company AS compID "_
				   "FROM Vacancy.Vacancy AS V "_
				   "INNER JOIN Vacancy.Company AS C ON V.Company=C.ID "_
				   "LEFT OUTER JOIN Vacancy.VacancyResponse AS VR ON V.ID=VR.Vacancy "_
				   "LEFT OUTER JOIN Vacancy.VacancyView AS VV ON V.ID= VV.Vacancy "_
				   "WHERE V.ID="_compid_
				   "GROUP BY V.ID "_
				   "ORDER BY V.Company" */
				   
	set vacQuery = "SELECT C.Name AS CompanyName,nvl(SUM(d.cou_view),0) AS CountView,  nvl(SUM(d.cou_resp),0) AS CountResp,"_
  						 " C.CompMainInfo, V.CityVacancy, V.Skills, V.Links_URL AS URL, V.VacancyCurrency, "_ 
					     "V.ID AS IDVac, V.VacancyType, V.Name AS VacancyName, V.RegDate, V.StartSalary, V.EndSalary, "_ 
					     "V.MainInfo, V.Institution, V.AddInfo,V.EduLevel, V.Company AS compID "_				   
					   "FROM "_
					   "(SELECT  VV.Vacancy, Count(VV.ID) as cou_view,0 as cou_resp "_
					   "FROM Vacancy.VacancyView AS VV GROUP BY VV.Vacancy "_
					   "UNION ALL "_
					   "SELECT  VR.Vacancy, 0 as cou_view,Count(VR.ID)as cou_resp "_
					   "FROM Vacancy.VacancyResponse AS VR GROUP BY VR.Vacancy) d "_
					   "RIGHT OUTER JOIN  vacancy.vacancy V ON V.ID = d.Vacancy "_
					   "INNER JOIN Vacancy.Company AS C ON V.Company=C.ID "_ 
					   "WHERE V.ID="_compid_
					   "GROUP BY D.Vacancy, V.Name "_
					   "ORDER BY V.RegDate DESC"
					   ///"ORDER BY V.Company"
  do ##class(WEB.JSON).GetJSONData(vacQuery)
  quit $$$OK
]]></Implementation>
</Method>

<Method name="GetVacancyAndCompany">
<Description>
список вакансий 
Select V.Name, C.Name FROM Vacancy.Vacancy AS V INNER JOIN Vacancy.Company AS C ON V.Company = C.ID</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>compid:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  do ##class(WEB.JSON).GetJSONData("Select V.Name, C.Name FROM Vacancy.Vacancy AS V INNER JOIN Vacancy.Company AS C ON V.Company = C.ID")
  // WHERE V.ID ="_compid)
  quit $$$OK
]]></Implementation>
</Method>

<Method name="VacancyReverse">
<Description>
метод переключения статуса вакансии активная/неактивная</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>vacid:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	// откроем вакансию по ИД
	set v = ##class(Vacancy.Vacancy).%OpenId(vacid)
	// считаем текущий статус
	set stat = v.IsActive
	
	// в зависимости от статуса - поменяем на противоположный
	if (stat = 1){
		set v.IsActive = 0
	}
	else{
		set v.IsActive = 1	
		set v.RegDate=$ZDATETIME($NOW(),3,1,1)
	}
 
	do v.%Save()
	
	// костыль для возврата значения
	do ##class(WEB.JSON).GetJSONData("SELECT * FROM Vacancy.Vacancy WHERE ID="_vacid)
	
	quit $$$OK
]]></Implementation>
</Method>

<Method name="VacancyUp">
<ClassMethod>1</ClassMethod>
<FormalSpec>vacid:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
		// откроем вакансию по ИД
	set v = ##class(Vacancy.Vacancy).%OpenId(vacid)
	set v.RegDate=$ZDATETIME($NOW(),3,1,1)
	w v.RegDate
	do v.%Save()
	quit $$$OK
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// -------------VACANCY END-------------------------

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// -------------SYSTEMUSER BEGIN--------------------

]]></Content>
</UDLText>

<Method name="GetUsers">
<Description>
тут будем получать список Пользователей</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	
  do ##class(WEB.JSON).GetJSONData("select *from Vacancy.SystemUser")
  quit $$$OK
]]></Implementation>
</Method>

<Method name="AuthVerify">
<Description>
метод аутентификации</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>login,pwd</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  set phash =..MD5HEX(pwd)
  set ip =%request.GetCgiEnv("REMOTE_ADDR")
  if (..VerificationPassword(login, phash, ip)'="") {

 
  set query = "SELECT FirstName FROM Vacancy.SystemUser WHERE Login = '"_login_"' AND Password = '"_phash_"'"
  do ##class(WEB.JSON).GetJSONData(query)
  }
  quit $$$OK
]]></Implementation>
</Method>

<Method name="AuthVerifyByCookie">
<ClassMethod>1</ClassMethod>
<FormalSpec>cookie:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set ip =%request.GetCgiEnv("REMOTE_ADDR")
	Set tProvider = ##class(%ZEN.Auxiliary.jsonSQLProvider).%New()
	
	//w ..VerificationSessions(cookie,"")
	if (..VerificationSessions(cookie,ip)'=1){
	do tProvider.%DrawJSON() //??????????????
	}
	quit $$$OK
]]></Implementation>
</Method>

<Method name="LoginOut">
<Description>
Выходим </Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>session:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	// Убить куки ????????????
	set ip =%request.GetCgiEnv("REMOTE_ADDR")
	set ID =..GetUserIdBySessions(session, ip)
	w ID
	//set SU=##class(Vacancy.SystemUser).%OpenId(ID)
	//set SU.Salt=$RANDOM(1000)
	//do SU.%Save()
	
	do %response.SetCookie("login","",$h+1000,"/csp/vacancy")
	Set tProvider = ##class(%ZEN.Auxiliary.jsonSQLProvider).%New()
  	do tProvider.%DrawJSON() 
  

	Quit $$$OK
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// -------------SYSTEMUSER END----------------------

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// -------------COMPANY BEGIN-----------------------

]]></Content>
</UDLText>

<Method name="GetCompany">
<Description>
Получаем одну конкретную компанию по ID
по хорошему compid надо проверять, т.к. 
переменная приходит снаружи</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>compid:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 
  do ##class(WEB.JSON).GetJSONData("select * from Vacancy.Company where ID="_compid)
  quit $$$OK
]]></Implementation>
</Method>

<Method name="GetAllCompanies">
<Description>
Просмотреть все компании</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 
  do ##class(WEB.JSON).GetJSONData("select * from Vacancy.Company ORDER BY Name")
  quit $$$OK
]]></Implementation>
</Method>

<Method name="GetCompaniesVacancies">
<Description>
Получить компании с кол-вом вакансий</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set cvQuery = "SELECT C.ID AS compID, C.Name AS CVName, COUNT(V.ID) AS VCOUNT "_
				  "FROM Vacancy.Company AS C "_
				  "INNER JOIN Vacancy.Vacancy AS V ON C.ID=V.Company "_
				  "GROUP BY C.ID ORDER BY VCOUNT DESC "
	do ##class(WEB.JSON).GetJSONData(cvQuery)
  	quit $$$OK
]]></Implementation>
</Method>

<Method name="CreateCompany">
<Description>
Добавить компанию в БД</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
     do ##class(WEB.JSON).CreateObject("Vacancy.Company")
     quit $$$OK
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// -------------COMPANY END-------------------------

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
/***********
***УНИВЕРСАЛЬНЫЕ МЕТОДЫ***
    ***НАЧАЛО***/
]]></Content>
</UDLText>

<Method name="GetJSONData">
<Description>
тут будем получать список Чего Попросят
SqlRequest - текстовый SQL запрос</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>SQLRequest:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  set st=$$$OK
   try{do ##class(%ZEN.Auxiliary.jsonSQLProvider).%WriteJSONFromSQL(,SQLRequest)}
   catch ex{set st=ex.AsStatus()}
  quit st
]]></Implementation>
</Method>

<Method name="tmpUpdateCompany">
<Description>
Методы - шаблоны для функций работающих с базой
Думаю стоит написать методы с 2-мя параметрами
один из которых - таблица в которой происходят изменения</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>compid:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
   set st=$$$OK
   try{
   } catch ex{
	  &html<<h1>entering <b>CATCH</b> block</h1>>  
	  set st=ex.AsStatus()
    }
    quit st
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
/***КОНЕЦ***
***УНИВЕРСАЛЬНЫЕ МЕТОДЫ***
    ************/
]]></Content>
</UDLText>

<Method name="UpdateImage">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  /*
   set st=$$$OK
 
   try{ 	     
		If (%request.Get("Type",,1)="Vacancy"){
		 	set a=##class(Vacancy.Vacancy).%OpenId(%request.Get("id",,1))	
		}
		Else {
		 	set a=##class(Vacancy.Company).%OpenId(%request.Get("id",,1))	
		}
    
    	set ^test=%request.GetMimeData("FileToUpload",1)
	    set a.Img=%request.GetMimeData("FileToUpload",1)
      
        $$$THROWONERROR(st,a.%Save())
	 
   } catch ex{set st=ex.AsStatus()}
   
    quit st
    */
    set st=$$$OK
   try{
	   set idImage =%request.Get("id",,1)
	   //w %request.Get("FileStream",,1)_"<br>"
	     	     
	 If (%request.Get("Type",,1)="Vacancy")
	 
	{
	 set a=##class(Vacancy.Vacancy).%OpenId(%request.Get("id",,1))	
	 
     w "Upadate is Ok! on Vacancy "_a.Name_"<br> <img src='http://localhost:57772/csp/vacancy/WEB.Image.cls?id="_idImage_"'/>"
	}
	Else
	{
	 set a=##class(Vacancy.Company).%OpenId(%request.Get("id",,1))	
     w "Upadate is Ok! On company "_a.Name_"<br> <img src='http://localhost:57772/csp/vacancy/WEB.CompanyImage.cls?id="_idImage_"'/>"
	}
	     
      set a.Img=%request.GetMimeData("FileStream",1)
      set ^test = %request.GetMimeData("FileStream",1)
       $$$THROWONERROR(st,a.%Save())
 
   } catch ex{set st=ex.AsStatus()}
    //w "Upadate is Ok!"_%request.Get("id",,1)
    quit st
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// метод загрузки картинки в базу. 

]]></Content>
</UDLText>

<Method name="LoadImage">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  //objType As %String, objID As %Integer, objImg As %BinaryStream
   set st=$$$OK
   
   set objID =  %request.Get("objID")
   set objType = %request.Get("objType")
   set objImg = %request.GetMimeData("objImg",1)
  // set ^test = objImg 	
   
   try{ 	     
		
		// Откроем объект по ИД
		If (objType="Vacancy"){
		 	set a=##class(Vacancy.Vacancy).%OpenId(objID)	
		}
		ElseIf (objType="Company") {
		 	set a=##class(Vacancy.Company).%OpenId(objID)	
		}
 		
 			set ^test = objType
 			 
        // загрузим картинку для данного объекта
	    set a.Img = objImg      	
     
        $$$THROWONERROR(st,a.%Save())
	 
   } catch ex{set st=ex.AsStatus()}
   
    quit st
]]></Implementation>
</Method>

<Method name="GetCookies">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	
	Quit %request.GetCookie("login",1,)
]]></Implementation>
</Method>

<Method name="MD5HEX">
<ClassMethod>1</ClassMethod>
<FormalSpec>str:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set b =$system.Encryption.MD5Encode(str)
	set docFileName="" f i=1:1:$L(b) set docFileName=docFileName_$J($ZHEX($A(b,i)),2)
	set docFileName=$TR(docFileName," ","0")
	Quit docFileName
]]></Implementation>
</Method>

<Query name="GetSystemUsers">
<Type>%SQLQuery</Type>
<SqlQuery> SELECT %ID,Login,Password,Salt FROM Vacancy.SystemUser</SqlQuery>
<Parameter name="CONTAINID" value="1"/>
</Query>

<Query name="GetSystemUsersByID">
<Type>%SQLQuery</Type>
<FormalSpec>login:%String,pass:%String</FormalSpec>
<SqlQuery> SELECT %ID,Login,Password,Salt,FirstName  FROM Vacancy.SystemUser
 WHERE Login=:login AND Password =:pass</SqlQuery>
<Parameter name="CONTAINID" value="1"/>
</Query>

<Method name="VerificationSessions">
<ClassMethod>1</ClassMethod>
<FormalSpec>session:%String,ip:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	set st=0
	set result = ##class(%Library.ResultSet).%New("WEB.JSON:GetSystemUsers")
 	do result.%Execute()
 	while (result.Next() '=0){
	 	if (..MD5HEX(result.Get("ID")_ip_result.Get("Salt")_result.Get("Login"))=session)
	 	{
	 	
	 	set st=1
	 	break
	 	}}
	Quit st
]]></Implementation>
</Method>

<Method name="GetUserIdBySessions">
<ClassMethod>1</ClassMethod>
<FormalSpec>session:%String,ip:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set st=""
	set result = ##class(%Library.ResultSet).%New("WEB.JSON:GetSystemUsers")
 	do result.%Execute()
 	while (result.Next() '=0){
	 	if (..MD5HEX(result.Get("ID")_ip_result.Get("Salt")_result.Get("Login"))=session)
	 	{
	 	
	 	set st=result.Get("ID")
	 	break
	 	}}
	Quit st
]]></Implementation>
</Method>

<Method name="VerificationPassword">
<ClassMethod>1</ClassMethod>
<FormalSpec>login:%String,pass:%String,ip:%String</FormalSpec>
<Implementation><![CDATA[
	set result = ##class(%Library.ResultSet).%New("WEB.JSON:GetSystemUsersByID")
 	do result.%Execute(login,pass)
 	do result.Next()

 	if (result.Get("ID")'="")
 	{
	 	do %response.SetCookie("login",result.Get("FirstName"),$h+1000,"/csp/vacancy")
	 	set session =..MD5HEX(result.Get("ID")_ip_result.Get("Salt")_result.Get("Login"))
  		do %response.SetCookie("CookieSession",session,$h+1000,"/") 
	 	
	 	}
	 else
	 	{
		 // Ничего	
		 }

	Quit result.Get("ID")
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^WEB.JSOND</DataLocation>
<DefaultData>JSONDefaultData</DefaultData>
<IdLocation>^WEB.JSOND</IdLocation>
<IndexLocation>^WEB.JSONI</IndexLocation>
<StreamLocation>^WEB.JSONS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="JSONDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>URL</Value>
</Value>
<Value name="3">
<Value>PageName</Value>
</Value>
<Value name="4">
<Value>URLPrefix</Value>
</Value>
<Value name="5">
<Value>UserAgent</Value>
</Value>
<Value name="6">
<Value>RequestId</Value>
</Value>
<Value name="7">
<Value>ContentType</Value>
</Value>
<Value name="8">
<Value>CharSet</Value>
</Value>
<Value name="9">
<Value>Content</Value>
</Value>
<Value name="10">
<Value>Method</Value>
</Value>
<Value name="11">
<Value>Protocol</Value>
</Value>
<Value name="12">
<Value>Secure</Value>
</Value>
<Value name="13">
<Value>GatewayApplication</Value>
</Value>
<Value name="14">
<Value>GatewayConnectionName</Value>
</Value>
<Value name="15">
<Value>GatewayNewId</Value>
</Value>
<Value name="16">
<Value>GatewayBuild</Value>
</Value>
<Value name="17">
<Value>GatewayFunctions</Value>
</Value>
<Value name="18">
<Value>GatewaySessionCookie</Value>
</Value>
<Value name="19">
<Value>GatewayInstanceName</Value>
</Value>
<Value name="20">
<Value>GatewayError</Value>
</Value>
<Value name="21">
<Value>Application</Value>
</Value>
<Value name="22">
<Value>CSPGatewayRequest</Value>
</Value>
<Value name="23">
<Value>GatewayTimeout</Value>
</Value>
<Value name="24">
<Value>AppData</Value>
</Value>
<Value name="25">
<Value>AppMatch</Value>
</Value>
<Value name="26">
<Value>HTTPVersion</Value>
</Value>
<Value name="27">
<Value>Status</Value>
</Value>
<Value name="28">
<Value>Redirect</Value>
</Value>
<Value name="29">
<Value>ServerSideRedirect</Value>
</Value>
<Value name="30">
<Value>CookiePath</Value>
</Value>
<Value name="31">
<Value>HeaderCharSet</Value>
</Value>
<Value name="32">
<Value>ContentLength</Value>
</Value>
<Value name="33">
<Value>NoCharSetConvert</Value>
</Value>
<Value name="34">
<Value>UseHttpOnly</Value>
</Value>
<Value name="35">
<Value>InProgress</Value>
</Value>
<Value name="36">
<Value>VaryByParam</Value>
</Value>
<Value name="37">
<Value>TraceDump</Value>
</Value>
<Value name="38">
<Value>OutputSessionToken</Value>
</Value>
<Value name="39">
<Value>UseASPredirect</Value>
</Value>
<Value name="40">
<Value>Timeout</Value>
</Value>
<Value name="41">
<Value>Language</Value>
</Value>
<Value name="42">
<Value>Domain</Value>
</Value>
<Value name="43">
<Value>GzipOutput</Value>
</Value>
<Value name="44">
<Value>CSPGatewayData</Value>
</Value>
</Data>
</Storage>
</Class>
</Export>
