<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="WEB.JSON">
<Description>
Обработка запросов к/от базы</Description>
<Super>%Base,%RegisteredObject</Super>
<TimeCreated>63004,63548.548932</TimeCreated>

<Method name="DefaultTemplate">
<Description>
Шаблон административной страницы</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  set st=$$$OK
   &html<<h1>DefaultTemplate() Empty page <b> block </b></h1>>  
   
  quit st
]]></Implementation>
</Method>

<Method name="ReDirectMail">
<Description>
Отправка </Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>vrID:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	q ##class(Vacancy.CreateMail).ReDirectMail(vrID)
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// -------------Start VacancyView---------------------

]]></Content>
</UDLText>

<Method name="GetCountVacancyView">
<ClassMethod>1</ClassMethod>
<FormalSpec>vacid:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set vacQuery = "SELECT Count(*) "_
				   "FROM Vacancy.VacancyView AS V "_
				   "WHERE V.Vacancy="_vacid
				   
	do ##class(WEB.JSON).GetJSONData(vacQuery)
	quit $$$OK
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// -------------End VacancyView-----------------------

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// -------------Company-----------------------

]]></Content>
</UDLText>

<Method name="companyCreate">
<Description>
Добавление новой компании</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	
	   set st=$$$OK
   try{
	   $$$THROWONERROR(st,##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.obj,1))
       
      set com=##class(Vacancy.Company).%New()
      set com.Name=$ZCONVERT(obj.CompanyName,"I","UTF8")
      set com.Adress.Country=$ZCONVERT(obj.Country,"I","UTF8")
      set com.Adress.State=$ZCONVERT(obj.State,"I","UTF8")
      set com.Adress.City=$ZCONVERT(obj.City,"I","UTF8")
      set com.Adress.Street=$ZCONVERT(obj.Street,"I","UTF8")
      set com.Adress.Building=$ZCONVERT(obj.Building,"I","UTF8")
      set com.Adress.Apartament=$ZCONVERT(obj.Apartament,"I","UTF8")
      set com.Adress.Email=$ZCONVERT(obj.Email,"I","UTF8")
      set com.Adress.Telephone=$ZCONVERT(obj.Telephone,"I","UTF8")
      set com.Adress.URL=$ZCONVERT(obj.URL,"I","UTF8")
      set com.CompMainInfo=$ZCONVERT(obj.CompMainInfo,"I","UTF8")
       $$$THROWONERROR(st,com.%Save())
 
   } catch ex{set st=ex.AsStatus()}
    quit st
]]></Implementation>
</Method>

<Method name="Companyupdate">
<Description>
Обновление компании</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>compid:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	
	   set st=$$$OK
   try{
	   $$$THROWONERROR(st,##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.obj,1))
       
      set com=##class(Vacancy.Company).%OpenId(compid)
      set com.Name=$ZCONVERT(obj.CompanyName,"I","UTF8")
      set com.Adress.Country=$ZCONVERT(obj.Country,"I","UTF8")
      set com.Adress.State=$ZCONVERT(obj.State,"I","UTF8")
      set com.Adress.City=$ZCONVERT(obj.City,"I","UTF8")
      set com.Adress.Street=$ZCONVERT(obj.Street,"I","UTF8")
      set com.Adress.Building=$ZCONVERT(obj.Building,"I","UTF8")
      set com.Adress.Apartament=$ZCONVERT(obj.Apartament,"I","UTF8")
      set com.Adress.Email=$ZCONVERT(obj.Email,"I","UTF8")
      set com.Adress.Telephone=$ZCONVERT(obj.Telephone,"I","UTF8")
      set com.Adress.URL=$ZCONVERT(obj.URL,"I","UTF8")
      set com.CompMainInfo=$ZCONVERT(obj.CompMainInfo,"I","UTF8") 
       $$$THROWONERROR(st,com.%Save())
 
   } catch ex{set st=ex.AsStatus()}
    quit st
]]></Implementation>
</Method>

<Method name="delCompany">
<Description>
Удалить компанию из БД</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>compid:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	 
	q ##class(Vacancy.Company).DeleteCompany(compid)
]]></Implementation>
</Method>

<Method name="companyGet">
<Description>
компания</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>compid:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set vacQuery = "SELECT C.Name AS CompanyName, C.Adress_Apartament AS Apartament, C.Adress_Building AS Building, "_
	              "C.Adress_City AS City, C.Adress_Country AS Country, C.Adress_Email AS Email, C.Adress_State AS State, "_
	               "C.Adress_Street AS Street, C.Adress_Telephone AS Telephone, "_
	               "C.Adress_URL AS URL, C.ID,  C.CompMainInfo "_
				   "FROM Vacancy.Company AS C "_
				   "WHERE C.ID="_compid
				   
	do ##class(WEB.JSON).GetJSONData(vacQuery)
	quit $$$OK
]]></Implementation>
</Method>

<Method name="getallcompanys">
<Description>
список компаний</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set vacQuery = "SELECT C.Name AS CompanyName, C.CompMainInfo, C.Adress_Apartament AS Apartament, C.Adress_Building AS Building,"_
	               "C.Adress_City AS City, C.Adress_Country AS Country, C.Adress_Email AS Email, C.Adress_State AS State,"_
	               "C.Adress_Street AS Street, C.Adress_Telephone AS Telephone, C.Adress_URL AS URL, C.ID AS IDComp "_
				   "FROM Vacancy.Company AS C"
				   
	do ##class(WEB.JSON).GetJSONData(vacQuery)
	quit $$$OK
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// -------------End company-------------------

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// -------------System Users-----------------------

]]></Content>
</UDLText>

<Method name="CreateSystemUsers">
<Description>
Добавление нового пользователя</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	
	   set st=$$$OK
   try{
	   $$$THROWONERROR(st,##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.obj,1))
       
      set su=##class(Vacancy.SystemUser).%New()
      set su.FirstName=$ZCONVERT(obj.FirstName,"I","UTF8")
      set su.LastName=$ZCONVERT(obj.LastName,"I","UTF8")
      set su.DOB=obj.DOB
      set su.Sex=$ZCONVERT(obj.Sex,"I","UTF8")
      set su.HomeAdress.Apartament=$ZCONVERT(obj.Apartament,"I","UTF8")
      set su.HomeAdress.Building=$ZCONVERT(obj.Building,"I","UTF8")
      set su.HomeAdress.City=$ZCONVERT(obj.City,"I","UTF8")
      set su.HomeAdress.Country=$ZCONVERT(obj.Country,"I","UTF8")
      set su.HomeAdress.Email=$ZCONVERT(obj.Email,"I","UTF8")
      set su.HomeAdress.State=$ZCONVERT(obj.State,"I","UTF8")
      set su.HomeAdress.Street=$ZCONVERT(obj.Street,"I","UTF8")
      set su.HomeAdress.Telephone=$ZCONVERT(obj.Telephone,"I","UTF8")
      set su.HomeAdress.URL=$ZCONVERT(obj.URL,"I","UTF8")
      set su.Login="login"
      set su.Password="awef"
     
       $$$THROWONERROR(st,su.%Save())
 
   } catch ex{set st=ex.AsStatus()}
    quit st
]]></Implementation>
</Method>

<Method name="UpdateSystemUsers">
<Description>
Обновление пользователя</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>compid:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	
	   set st=$$$OK
   try{
	   $$$THROWONERROR(st,##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.obj,1))
       
      set su=##class(Vacancy.SystemUser).%OpenId(compid)
      
      set su.FirstName=$ZCONVERT(obj.FirstName,"I","UTF8")
      set su.LastName=$ZCONVERT(obj.LastName,"I","UTF8")
     // set su.DOB=obj.DOB
      set su.Sex=$ZCONVERT(obj.Sex,"I","UTF8")
      set su.HomeAdress.Apartament=$ZCONVERT(obj.Apartament,"I","UTF8")
      set su.HomeAdress.Building=$ZCONVERT(obj.Building,"I","UTF8")
      set su.HomeAdress.City=$ZCONVERT(obj.City,"I","UTF8")
      set su.HomeAdress.Country=$ZCONVERT(obj.Country,"I","UTF8")
      set su.HomeAdress.Email=$ZCONVERT(obj.Email,"I","UTF8")
      set su.HomeAdress.State=$ZCONVERT(obj.State,"I","UTF8")
      set su.HomeAdress.Street=$ZCONVERT(obj.Street,"I","UTF8")
      set su.HomeAdress.Telephone=$ZCONVERT(obj.Telephone,"I","UTF8")
      set su.HomeAdress.URL=$ZCONVERT(obj.URL,"I","UTF8")
     
       $$$THROWONERROR(st,su.%Save())
 
   } catch ex{set st=ex.AsStatus()}
    quit st
]]></Implementation>
</Method>

<Method name="DeleteSystemUsers">
<Description>
Удаление пользователя</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>compid:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st=##class(Vacancy.SystemUser).%DeleteId(compid)
    quit st
]]></Implementation>
</Method>

<Method name="GetSystemUser">
<Description>
пользователь</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>compid:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set vacQuery = "SELECT V.FirstName, V.LastName, V.HomeAdress_City AS City, V.HomeAdress_Country AS Country, "_
	               "HomeAdress_Apartament AS Apartament, V.HomeAdress_Building AS Building,"_ 
	               "V.HomeAdress_Email AS Email, V.HomeAdress_State AS State, V.HomeAdress_Street AS Street,"_
	               "V.HomeAdress_Telephone AS Telephone, V.HomeAdress_URL AS URL,"_
					      "V.ID AS IDUser, V.DOB, V.Sex, V.UserType "_ 
				   "FROM Vacancy.SystemUser AS V "_
				   "WHERE V.ID="_compid
				   
				 
	do ##class(WEB.JSON).GetJSONData(vacQuery)
	quit $$$OK
]]></Implementation>
</Method>

<Method name="GetAllSystemUsers">
<Description>
список пользователей</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set vacQuery = "SELECT V.FirstName, V.LastName, V.HomeAdress_City AS City, V.HomeAdress_Country AS Country, "_
	               "HomeAdress_Apartament AS Apartament, V.HomeAdress_Building AS Building,"_ 
	               "V.HomeAdress_Email AS Email, V.HomeAdress_State AS State, V.HomeAdress_Street AS Street,"_
	               "V.HomeAdress_Telephone AS Telephone, V.HomeAdress_URL AS URL,"_ 
					      "V.ID AS IDUser, V.DOB, V.Sex, V.UserType "_ 
				   "FROM Vacancy.SystemUser AS V "
				 
	do ##class(WEB.JSON).GetJSONData(vacQuery)
	quit $$$OK
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// -------------End system Users-------------------

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// -------------VACANCY RESPONSE-----------------------

]]></Content>
</UDLText>

<Method name="GetCountVacancyResponse">
<ClassMethod>1</ClassMethod>
<FormalSpec>vacid:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set vacQuery = "SELECT Count(*) "_
				   "FROM Vacancy.VacancyResponse AS V "_
				   "WHERE V.Vacancy="_vacid
				   
	do ##class(WEB.JSON).GetJSONData(vacQuery)
	quit $$$OK
]]></Implementation>
</Method>

<Method name="GetVacancyResponse">
<ClassMethod>1</ClassMethod>
<FormalSpec>vacid:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set vacQuery = "SELECT V.ID, V.FirstName, V.LastName, V.ResponseDate, V.ResponseText, From_Apartament AS Apartament,"_
	               "From_Building AS Building, From_City AS City, From_Country AS Country, From_Email AS Email, "_
	               "From_State AS State, From_Street AS Street, From_Telephone AS Telephone, From_URL AS URL, V.Vacancy "_
				   "FROM Vacancy.VacancyResponse AS V "_
				   "WHERE V.Vacancy="_vacid
				 
	do ##class(WEB.JSON).GetJSONData(vacQuery)
	quit $$$OK
]]></Implementation>
</Method>

<Method name="NVR">
<Description>
Добавить отзыв</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>compid:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	
	   set st=$$$OK
   try{
	   $$$THROWONERROR(st,##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.obj,1))
       
       set vr=##class(Vacancy.VacancyResponse).%New()
       set vacancy=##class(Vacancy.Vacancy).%OpenId(compid)
       //#dim a as %StringTimeStamp

       set vr.Vacancy=vacancy
       //set obj=$ZCONVERT(obj,"I","UTF8")
       set vr.FirstName=$ZCONVERT(obj.FirstName,"I","UTF8")
       
       set vr.LastName=$ZCONVERT(obj.LastName,"I","UTF8")
       set vr.From.Country=$ZCONVERT(obj.Country,"I","UTF8")
       set vr.From.State=$ZCONVERT(obj.State,"I","UTF8")
       set vr.From.City=$ZCONVERT(obj.City,"I","UTF8")
       set vr.From.Street=$ZCONVERT(obj.Street,"I","UTF8")
       set vr.From.Building=obj.Building
       set vr.From.Apartament=obj.Apartament
       set vr.From.Email=obj.Email
       set vr.From.Telephone=obj.Telephone
       //set vr.ResponseDate=##class(%Library.TimeStamp).OdbcToLogical($h)
       set vr.ResponseDate=$piece($H, ",")
       set vr.ResponseText=$ZCONVERT(obj.ResponseText,"I","UTF8") 
       $$$THROWONERROR(st,vr.%Save())
 
   } catch ex{set st=ex.AsStatus()}
    quit st
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// ------------- END VACANCY RESPONSE-----------------------

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// -------------VACANCY BEGIN-----------------------

]]></Content>
</UDLText>

<Method name="CreateVacancy">
<Description>
Добавить вакансию</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
		   set st=$$$OK
   try{
	   $$$THROWONERROR(st,##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.obj,1))
       
       set vacancy=##class(Vacancy.Vacancy).%New()
       set vacancy.Name=$ZCONVERT(obj.VacancyName,"I","UTF8")
       set vacancy.Skills=$ZCONVERT(obj.Skills,"I","UTF8")
       set vacancy.VacancyType=$ZCONVERT(obj.VacancyType,"I","UTF8")
       set vacancy.EduLevel=$ZCONVERT(obj.EduLevel,"I","UTF8")
       set vacancy.Institution=$ZCONVERT(obj.Institution,"I","UTF8")
       set vacancy.StartSalary=$ZCONVERT(obj.StartSalary,"I","UTF8")
       set vacancy.EndSalary=$ZCONVERT(obj.EndSalary,"I","UTF8")
       set vacancy.RegDate=$piece($H, ",")
       set vacancy.CityVacancy=$ZCONVERT(obj.CityVacancy,"I","UTF8")
       set vacancy.MainInfo=$ZCONVERT(obj.MainInfo,"I","UTF8")
       set vacancy.AddInfo=$ZCONVERT(obj.AddInfo,"I","UTF8")
       set vacancy.Seats=$ZCONVERT(obj.Seats,"I","UTF8")
       set vacancy.Company=##class(Vacancy.Company).%OpenId(obj.comid)
       //set vacancy.Links.URL=obj.Links_URL
              
       $$$THROWONERROR(st,vacancy.%Save())
 
   } catch ex{set st=ex.AsStatus()}
    quit st
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// <MDG.CTP>

]]></Content>
</UDLText>

<Method name="DeleteVacancy">
<Description>
Удалить вакансию</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>compid:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
   set st=$$$OK
   try{$$$THROWONERROR(st,##class(Vacancy.Vacancy).%DeleteId(compid))} 
   catch ex{set st=ex.AsStatus()}
   quit st
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// </MDG.CTP>

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// Обновить вакансию

]]></Content>
</UDLText>

<Method name="UpdateVacancy">
<ClassMethod>1</ClassMethod>
<FormalSpec>compid:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	   set st=$$$OK
   try{
	   $$$THROWONERROR(st,##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.obj,1))
       
       set vacancy=##class(Vacancy.Vacancy).%OpenId(compid)
      
       set vacancy.Name=$ZCONVERT(obj.VacancyName,"I","UTF8")
       set vacancy.Skills=$ZCONVERT(obj.Skills,"I","UTF8")
       set vacancy.VacancyType=$ZCONVERT(obj.VacancyTypes,"I","UTF8")
       set vacancy.EduLevel=$ZCONVERT(obj.EduLevel,"I","UTF8")
       set vacancy.Institution=$ZCONVERT(obj.Institution,"I","UTF8")
       set vacancy.StartSalary=$ZCONVERT(obj.StartSalary,"I","UTF8")
       set vacancy.EndSalary=$ZCONVERT(obj.EndSalary,"I","UTF8")
       set vacancy.RegDate=$piece($H, ",")
       set vacancy.CityVacancy=$ZCONVERT(obj.CityVacancy,"I","UTF8")
       set vacancy.MainInfo=$ZCONVERT(obj.MainInfo,"I","UTF8")
       set vacancy.AddInfo=$ZCONVERT(obj.AddInfo,"I","UTF8")
       set vacancy.Seats=$ZCONVERT(obj.Seats,"I","UTF8")
       set vacancy.Company=##class(Vacancy.Company).%OpenId(obj.compID)
       
       set vacancy.Links.URL=obj.URL

       $$$THROWONERROR(st,vacancy.%Save())
 
   } catch ex{set st=ex.AsStatus()}
    quit st
]]></Implementation>
</Method>

<Method name="GetVacanciesOld">
<Description>
список вакансий старый</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	do ##class(WEB.JSON).GetJSONData("select *from Vacancy.Vacancy")
	quit $$$OK
]]></Implementation>
</Method>

<Method name="GetVacancies">
<Description>
список вакансий</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set vacQuery = "SELECT C.Name AS CompanyName, V.CityVacancy, V.VacancyType, "_ 
					      "V.ID AS IDVac, V.Name AS VacancyName, V.RegDate, V.StartSalary, V.EndSalary "_ 
				   "FROM Vacancy.Vacancy AS V "_
				   "INNER JOIN Vacancy.Company AS C ON V.Company=C.ID "_
				   "ORDER BY V.Company"
	do ##class(WEB.JSON).GetJSONData(vacQuery)
	quit $$$OK
]]></Implementation>
</Method>

<Method name="GetVacanciesByCompID">
<Description>
список вакансий</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>compID</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set vacQuery = "SELECT C.Name AS CompanyName, V.CityVacancy, V.VacancyType, "_ 
					      "V.ID AS IDVac, V.Name AS VacancyName, V.RegDate, V.StartSalary, V.EndSalary "_ 
				   "FROM Vacancy.Vacancy AS V "_
				   "INNER JOIN Vacancy.Company AS C ON V.Company=C.ID "_
				   "WHERE C.ID="_compID_ 
				   "ORDER BY V.Company "
				  
				   
	do ##class(WEB.JSON).GetJSONData(vacQuery)
	quit $$$OK
]]></Implementation>
</Method>

<Method name="GetVacancy">
<Description>
список вакансий</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>compid:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  set vacQuery = "SELECT C.Name AS CompanyName, C.CompMainInfo, V.CityVacancy, V.Skills, V.Links_URL AS URL, "_ 
					     "V.ID AS IDVac, V.VacancyType, V.Name AS VacancyName, V.RegDate, V.StartSalary, V.EndSalary, "_ 
					     "V.MainInfo, V.Institution, V.AddInfo,V.EduLevel, V.Company AS compID "_
				   "FROM Vacancy.Vacancy AS V "_
				   "INNER JOIN Vacancy.Company AS C ON V.Company=C.ID "_
				   "WHERE V.ID="_compid_
				   "ORDER BY V.Company"
  do ##class(WEB.JSON).GetJSONData(vacQuery)
  quit $$$OK
]]></Implementation>
</Method>

<Method name="GetVacancyAndCompany">
<Description>
список вакансий 
Select V.Name, C.Name FROM Vacancy.Vacancy AS V INNER JOIN Vacancy.Company AS C ON V.Company = C.ID</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>compid:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  do ##class(WEB.JSON).GetJSONData("Select V.Name, C.Name FROM Vacancy.Vacancy AS V INNER JOIN Vacancy.Company AS C ON V.Company = C.ID")
  // WHERE V.ID ="_compid)
  quit $$$OK
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// -------------VACANCY END-------------------------

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// -------------SYSTEMUSER BEGIN--------------------

]]></Content>
</UDLText>

<Method name="GetUsers">
<Description>
тут будем получать список Пользователей</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  do ##class(WEB.JSON).GetJSONData("select *from Vacancy.SystemUser")
  quit $$$OK
]]></Implementation>
</Method>

<Method name="AuthVerify">
<Description>
метод аутентификации</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>login,pwd</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  set phash = $system.Encryption.MD5Hash(pwd)
 
  &sql(SELECT FirstName into:fname FROM Vacancy.SystemUser WHERE Login = :login AND Password = :phash)
 
  do %response.SetCookie("login",fname,$h+1000,"/csp/vacancy")
 // do %response.SetCookie("pwd",log,$h+1000,"/")
 
  set query = "SELECT FirstName FROM Vacancy.SystemUser WHERE Login = '"_login_"' AND Password = '"_phash_"'"
  do ##class(WEB.JSON).GetJSONData(query)
  quit $$$OK
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// -------------SYSTEMUSER END----------------------

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// -------------COMPANY BEGIN-----------------------

]]></Content>
</UDLText>

<Method name="GetCompany">
<Description>
Получаем одну конкретную компанию по ID
по хорошему compid надо проверять, т.к. 
переменная приходит снаружи</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>compid:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 
  do ##class(WEB.JSON).GetJSONData("select * from Vacancy.Company where ID="_compid)
  quit $$$OK
]]></Implementation>
</Method>

<Method name="GetAllCompanies">
<Description>
Просмотреть все компании</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 
  do ##class(WEB.JSON).GetJSONData("select * from Vacancy.Company ORDER BY Name")
  quit $$$OK
]]></Implementation>
</Method>

<Method name="GetCompaniesVacancies">
<Description>
Получить компании с кол-вом вакансий</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set cvQuery = "SELECT C.ID AS compID, C.Name AS CVName, COUNT(V.ID) AS VCOUNT "_
				  "FROM Vacancy.Company AS C "_
				  "INNER JOIN Vacancy.Vacancy AS V ON C.ID=V.Company "_
				  "GROUP BY C.ID ORDER BY VCOUNT DESC "
	do ##class(WEB.JSON).GetJSONData(cvQuery)
  	quit $$$OK
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
/*
/// Обновить компанию
ClassMethod UpdateCompany(compid As %String) As %Status
{
   set st=$$$OK
   try{
	   $$$THROWONERROR(st,##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.obj,1))
       set comp=##class(Data.Company).%OpenId(compid)
       throw:comp=$$$NULLOREF ##class(%Exception.StatusException).CreateFromStatus($$$ERROR(5001,"Нэ нашёль компанию :("))
       // здесь надо перечислить все поля... 
       // или запомнить ID объекта и сохранить его целиком
       // или тупо set comp=obj
       set comp.Name=obj.Name
       $$$THROWONERROR(st,comp.%Save())
 
   } catch ex{set st=ex.AsStatus()}
    quit st
}
*/
]]></Content>
</UDLText>

<Method name="CreateCompany">
<Description>
Добавить компанию в БД</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
     do ##class(WEB.JSON).CreateObject("Vacancy.Company")
     quit $$$OK
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// -------------COMPANY END-------------------------

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
/***********
***УНИВЕРСАЛЬНЫЕ МЕТОДЫ***
    ***НАЧАЛО***/
]]></Content>
</UDLText>

<Method name="UpdateObject">
<Description>
пока не придумал как сделать этот метод универсальным
тупо set comp=obj не катит - надо пробежаться по всем полям объектов</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>compid:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
   set st=$$$OK
   
   /*
   try{
	   $$$THROWONERROR(st,##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.obj,1))
	   // пытаемся сделать обратное преобразование - из формата json в объект
       set comp=##class(Data.Company).%OpenId(compid)
       throw:comp=$$$NULLOREF ##class(%Exception.StatusException).CreateFromStatus($$$ERROR(5001,"Нэ нашёль компанию :("))
       set comp.Name=obj.Name
       $$$THROWONERROR(st,comp.%Save())
 
   } catch ex{
	  &html<<h1>entering <b>CATCH</b> block</h1>>  
	  set st=ex.AsStatus()
    }*/
    quit st
]]></Implementation>
</Method>

<Method name="DeleteObject">
<Description><![CDATA[
Удалить из БД<br/>
<var>compid</var>ID строка удаляемого объекта<br/>
<var>bd</var>имя удаляемой базы например Data.Company<br/>]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>compid,bd:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	// %CompiledClass %ClassDefinition
   set st=$$$OK
   // пока не знаю как передать сюда объект, потому все остальные делете будут без трай кэтч
 /*   try{$$$THROWONERROR(st,##class(Vacancy._bd_).%DeleteId(compid))} 
   catch ex{set st=ex.AsStatus()}
  */ quit st
]]></Implementation>
</Method>

<Method name="CreateObject">
<Description>
Добавить ОБЪЕКТ в БД</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>bd:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
   set st=$$$OK
   try{$$$THROWONERROR(st,##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,bd,.obj,1))
	   $$$THROWONERROR(st,obj.%Save())} 
   catch ex{set st=ex.AsStatus()}
   quit st
]]></Implementation>
</Method>

<Method name="GetJSONData">
<Description>
тут будем получать список Чего Попросят
SqlRequest - текстовый SQL запрос</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>SQLRequest:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  set st=$$$OK
   try{do ##class(%ZEN.Auxiliary.jsonSQLProvider).%WriteJSONFromSQL(,SQLRequest)}
   catch ex{set st=ex.AsStatus()}
  quit st
]]></Implementation>
</Method>

<Method name="tmpUpdateCompany">
<Description>
Методы - шаблоны для функций работающих с базой
Думаю стоит написать методы с 2-мя параметрами
один из которых - таблица в которой происходят изменения</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>compid:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
   set st=$$$OK
   try{
   } catch ex{
	  &html<<h1>entering <b>CATCH</b> block</h1>>  
	  set st=ex.AsStatus()
    }
    quit st
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
/***КОНЕЦ***
***УНИВЕРСАЛЬНЫЕ МЕТОДЫ***
    ************/
]]></Content>
</UDLText>

<Method name="UpdateImage">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	   set st=$$$OK
   try{
	     
	     	     
	 If (%request.Get("Type",,1)="Vacancy")
	{
	 set a=##class(Vacancy.Vacancy).%OpenId(%request.Get("id",,1))	
	}
	Else
	{
	 set a=##class(Vacancy.Company).%OpenId(%request.Get("id",,1))	
	}
	     
      set a.Img=%request.GetMimeData("FileStream",1)
 
       $$$THROWONERROR(st,a.%Save())
 
   } catch ex{set st=ex.AsStatus()}
   
    quit st
]]></Implementation>
</Method>
</Class>
</Export>
