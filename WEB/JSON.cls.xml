<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="WEB.JSON">
<Description>
Обработка запросов к/от базы</Description>
<Super>%Base,%RegisteredObject</Super>
<TimeCreated>63004,63548.548932</TimeCreated>

<Method name="DefaultTemplate">
<Description>
Шаблон административной страницы</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  set st=$$$OK
   &html<<h1>DefaultTemplate() Empty page <b> block </b></h1>>  
   
  quit st
]]></Implementation>
</Method>

<Method name="GetVacancies">
<Description>
тут будем получать список вакансий</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  set st=$$$OK
   try{

	   do ##class(%ZEN.Auxiliary.jsonSQLProvider).%WriteJSONFromSQL(,"select *from Vacancy.Vacancy")
 
   } catch ex{
	  &html<<h1>entering <b>CATCH</b> block</h1>>  
	  set st=ex.AsStatus()
    }
  quit st
]]></Implementation>
</Method>

<Method name="GetUsers">
<Description>
тут будем получать список Пользователей</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 
  do ##class(WEB.JSON).GetJSONData("select *from Vacancy.SystemUser")
  quit $$$OK
]]></Implementation>
</Method>

<Method name="GetCompanyByID">
<Description>
Получаем одну конкретную компанию по ID
по хорошему compid надо проверять, т.к. 
переменная приходит снаружи</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>compid:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 
  do ##class(WEB.JSON).GetJSONData("select *from Vacancy.Company where ID="_compid)
  quit $$$OK
]]></Implementation>
</Method>

<Method name="GetJSONData">
<Description>
тут будем получать список Чего Попросят
SqlRequest - текстовый SQL запрос
Param1 - необязательный параметр - пока даже думаю 
нужен ли - потому и не объявил
такой винигрет - что бы обработчик ошибок каждый раз новый не писать</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>SQLRequest:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  set st=$$$OK
   try{

	   do ##class(%ZEN.Auxiliary.jsonSQLProvider).%WriteJSONFromSQL(,SQLRequest)
 
   } catch ex{
	  &html<<h1>entering <b>CATCH</b> block</h1>>  
	  set st=ex.AsStatus()
    }
  quit st
]]></Implementation>
</Method>

<Method name="UpdateCompany">
<Description>
Методы - шаблоны для функций работающих с базой
Думаю стоит написать методы с 2-мя параметрами
один из которых - таблица в которой происходят изменения</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>compid:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
   set st=$$$OK
   try{
   } catch ex{
	  &html<<h1>entering <b>CATCH</b> block</h1>>  
	  set st=ex.AsStatus()
    }
    quit st
]]></Implementation>
</Method>
</Class>
</Export>
