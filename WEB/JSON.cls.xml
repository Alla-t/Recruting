<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="WEB.JSON">
<Description>
Обработка запросов к/от базы</Description>
<Super>%Base,%RegisteredObject</Super>
<TimeCreated>63004,63548.548932</TimeCreated>

<Method name="DefaultTemplate">
<Description>
Шаблон административной страницы</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  set st=$$$OK
   &html<<h1>DefaultTemplate() Empty page <b> block </b></h1>>  
   
  quit st
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// -------------VACANCY BEGIN-----------------------

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// Обновить вакансию

]]></Content>
</UDLText>

<Method name="UpdateVacancy">
<ClassMethod>1</ClassMethod>
<FormalSpec>compid:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
   k ^TEST
   s ^TEST="here"
   set st=$$$OK
    /// может из за него?! &html<<h1>entering <b>UPDATE</b> block</h1>>  
		
   try{
	   // ошибка во втором параметре - д.б. строка
	   $$$THROWONERROR(st,##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,"Vacancy.Vacancy",.obj,1))
       /*zw obj
       s i=$i(^TEST($J))
       s ^TEST($J,i)="I was here"
       m ^TEST($J,i)=%request.Data*/
       #;s ^TEST="DEMO"
		//s stream=%request.Content
		//s ^AAA($J,"stream")=stream

	   // пытаемся сделать обратное преобразование - из формата json в объект
       set comp=##class(Vacancy.Vacancy).%OpenId(compid)
       throw:comp=$$$NULLOREF ##class(%Exception.StatusException).CreateFromStatus($$$ERROR(5001,"Нэ нашёль вакансию :("))
       set comp.Name=obj.Name/*
       set comp.Image=obj.Name
       set comp.RegDate=obj.Name
       set comp.Skills=obj.Name
       set comp.VacancyTypes=obj.Name
       set comp.Seats=obj.Name
       set comp.EduLevel=obj.Name
       set comp.Institution=obj.Name
       set comp.StartSalary=obj.Name
       set comp.EndSalary=obj.Name
       set comp.Links=obj.Name*/
       $$$THROWONERROR(st,comp.%Save())
 
   } catch ex{
	  &html<<h1>entering <b>CATCH</b> block</h1>>  
	  set st=ex.AsStatus()
    }
    quit st
]]></Implementation>
</Method>

<Method name="GetVacancies">
<Description>
список вакансий</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  do ##class(WEB.JSON).GetJSONData("select *from Vacancy.Vacancy")
  quit $$$OK
]]></Implementation>
</Method>

<Method name="GetVacancy">
<Description>
список вакансий</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>compid:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  do ##class(WEB.JSON).GetJSONData("select *from Vacancy.Vacancy where ID="_compid)
  quit $$$OK
]]></Implementation>
</Method>

<Method name="GetVacancyAndCompany">
<Description>
список вакансий 
Select V.Name, C.Name FROM Vacancy.Vacancy AS V INNER JOIN Vacancy.Company AS C ON V.Company = C.ID</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>compid:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  do ##class(WEB.JSON).GetJSONData("Select V.Name, C.Name FROM Vacancy.Vacancy AS V INNER JOIN Vacancy.Company AS C ON V.Company = C.ID")
  // WHERE V.ID ="_compid)
  quit $$$OK
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// -------------VACANCY END-------------------------

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// -------------SYSTEMUSER BEGIN--------------------

]]></Content>
</UDLText>

<Method name="GetUsers">
<Description>
тут будем получать список Пользователей</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  do ##class(WEB.JSON).GetJSONData("select *from Vacancy.SystemUser")
  quit $$$OK
]]></Implementation>
</Method>

<Method name="AuthVerify">
<Description>
метод аутентификации</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>login,pwd</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  set phash = $system.Encryption.MD5Hash(pwd)
  set str = "SELECT FirstName FROM Vacancy.SystemUser WHERE Login = '"_login_"' AND Password = '"_phash_"'"

  do ##class(WEB.JSON).GetJSONData(str)
  quit $$$OK
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// -------------SYSTEMUSER END----------------------

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// -------------COMPANY BEGIN-----------------------

]]></Content>
</UDLText>

<Method name="GetCompany">
<Description>
Получаем одну конкретную компанию по ID
по хорошему compid надо проверять, т.к. 
переменная приходит снаружи</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>compid:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 
  do ##class(WEB.JSON).GetJSONData("select *from Vacancy.Company where ID="_compid)
  quit $$$OK
]]></Implementation>
</Method>

<Method name="GetAllCompanies">
<Description>
Просмотреть все компании</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 
  do ##class(WEB.JSON).GetJSONData("select *from Vacancy.Company")
  quit $$$OK
]]></Implementation>
</Method>

<Method name="UpdateCompany">
<Description>
Обновить компанию</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>compid:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
   set st=$$$OK
   try{
	   $$$THROWONERROR(st,##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.obj,1))
       set comp=##class(Data.Company).%OpenId(compid)
       throw:comp=$$$NULLOREF ##class(%Exception.StatusException).CreateFromStatus($$$ERROR(5001,"Нэ нашёль компанию :("))
       // здесь надо перечислить все поля... 
       // или запомнить ID объекта и сохранить его целиком
       // или тупо set comp=obj
       set comp.Name=obj.Name
       $$$THROWONERROR(st,comp.%Save())
 
   } catch ex{set st=ex.AsStatus()}
    quit st
]]></Implementation>
</Method>

<Method name="DeleteCompany">
<Description>
Удалить компанию из БД</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>compid:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  do ##class(Vacancy.Company).%DeleteId(compid)
  quit $$$OK
]]></Implementation>
</Method>

<Method name="CreateCompany">
<Description>
Добавить компанию в БД</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
     do ##class(WEB.JSON).CreateObject("Vacancy.Company")
     quit $$$OK
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// -------------COMPANY END-------------------------

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
/***********
***УНИВЕРСАЛЬНЫЕ МЕТОДЫ***
    ***НАЧАЛО***/
]]></Content>
</UDLText>

<Method name="UpdateObject">
<Description>
пока не придумал как сделать этот метод универсальным
тупо set comp=obj не катит - надо пробежаться по всем полям объектов</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>compid:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
   set st=$$$OK
   
   /*
   try{
	   $$$THROWONERROR(st,##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.obj,1))
	   // пытаемся сделать обратное преобразование - из формата json в объект
       set comp=##class(Data.Company).%OpenId(compid)
       throw:comp=$$$NULLOREF ##class(%Exception.StatusException).CreateFromStatus($$$ERROR(5001,"Нэ нашёль компанию :("))
       set comp.Name=obj.Name
       $$$THROWONERROR(st,comp.%Save())
 
   } catch ex{
	  &html<<h1>entering <b>CATCH</b> block</h1>>  
	  set st=ex.AsStatus()
    }*/
    quit st
]]></Implementation>
</Method>

<Method name="DeleteObject">
<Description><![CDATA[
Удалить из БД<br/>
<var>compid</var>ID строка удаляемого объекта<br/>
<var>bd</var>имя удаляемой базы например Data.Company<br/>]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>compid,bd:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	// %CompiledClass %ClassDefinition
   set st=$$$OK
   // пока не знаю как передать сюда объект, потому все остальные делете будут без трай кэтч
 /*   try{$$$THROWONERROR(st,##class(Vacancy._bd_).%DeleteId(compid))} 
   catch ex{set st=ex.AsStatus()}
  */ quit st
]]></Implementation>
</Method>

<Method name="CreateObject">
<Description>
Добавить ОБЪЕКТ в БД</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>bd:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
   set st=$$$OK
   try{$$$THROWONERROR(st,##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,bd,.obj,1))
	   $$$THROWONERROR(st,obj.%Save())} 
   catch ex{set st=ex.AsStatus()}
   quit st
]]></Implementation>
</Method>

<Method name="GetJSONData">
<Description>
тут будем получать список Чего Попросят
SqlRequest - текстовый SQL запрос</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>SQLRequest:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  set st=$$$OK
   try{do ##class(%ZEN.Auxiliary.jsonSQLProvider).%WriteJSONFromSQL(,SQLRequest)}
   catch ex{set st=ex.AsStatus()}
  quit st
]]></Implementation>
</Method>

<Method name="tmpUpdateCompany">
<Description>
Методы - шаблоны для функций работающих с базой
Думаю стоит написать методы с 2-мя параметрами
один из которых - таблица в которой происходят изменения</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>compid:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
   set st=$$$OK
   try{
   } catch ex{
	  &html<<h1>entering <b>CATCH</b> block</h1>>  
	  set st=ex.AsStatus()
    }
    quit st
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
/***КОНЕЦ***
***УНИВЕРСАЛЬНЫЕ МЕТОДЫ***
    ************/
]]></Content>
</UDLText>
</Class>
</Export>
