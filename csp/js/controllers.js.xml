<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<CSP name="js/controllers.js" application="/csp/vacancy/"><![CDATA[
'use strict';

function vacancyCtrl($scope, $http,  $cookies, $window, configProvider, configProviderNA){
    $window.document.title="Вакансии по технологиям InterSystems";


    // получим из менеджера конфигурации корневой адрес
    if ($scope.rootURL == undefined && $cookies.login != undefined){
        configProvider.getURL(function(data){
            $scope.rootURL = data.URL;

        })
    }

    // если корневой адрес не заполнен - попытаемся получить из неавторизованного доступа
    if ($scope.rootURL == undefined && $cookies.login == undefined){
        configProviderNA.getURL(function(data){

            $scope.rootURL = data.URL;
        })
    }

    /*
    $http.get('config/cfg.json').success(function(data) {
        alert(data[0]["url"]);
    });

   /* var cfg = jsonService.query({Id: 1}, function(config) {
       alert(jsonService.url[1]);
    });     */



    // делаем пагинатор  из примера на хабре
//TODO: возможно пагинатору необходимо использовать фабрику и фильтр - сделаем позже
    /*

    $scope.Math = Math;
    $scope.items = vacancies.query(function(data){
        $scope.paginator.setPages($scope.items.length);
        var i = 0;
        angular.forEach(data, function(v,k) { data[k]._id = i++; });
    });

    $scope.paginator = {
        count: 10,
        page:  1,
        pages: 1,
        setPages: function(itemsCount){ this.pages = Math.ceil(itemsCount/this.count); }
    };
    $scope.$watch('items',function(newValue, oldValue) {
        if (newValue!==oldValue) $scope.paginator.setPages($scope.items.length);
    });
    $scope.$watch('paginator.page',function(page,old) {
        var newPage = page;
        if (page<1) newPage = 1;
        if (page>$scope.paginator.pages) newPage = old;
        if (typeof(newPage)=='string') newPage = +newPage.replace(/[^0-9]/,'');
        if (page!==newPage) $scope.paginator.page = newPage;
        angular.forEach($scope.items, function(v,k) { $scope.items[k].selected = false; });
    });
  */
    // функция получения количества отзывов
    $scope.GetCountVacancyResponse=function(vacid){
        $http.get("/av/json/getcountvacancyresponse/"+vacid).success(function(data){
            $scope.responsecount=data.children;}).error(function(data,status){
                $scope.alertzone="["+status+"] Ошибка загрузки  :( ["+data+"]"; });
    }
    // функция получения количества просмотров
    $scope.GetCountVacancyView=function(vacid){
        $http.get("/v/json/getcountvacancyview/"+vacid).success(function(data){
            $scope.viewcount=data.children;}).error(function(data,status){
                $scope.alertzone="["+status+"] Ошибка загрузки  :( ["+data+"]"; });
    }
    // функция получения вакансий
    $scope.getVacancies=function(){

        $http.get("/v/json/vacancies/").success(function(data){

       // $http.get("/v/json/vacancies").success(function(data){
            $scope.vacancies=data.children;}).error(function(data,status){
                $scope.alertzone="["+status+"] Ошибка загрузки компаний :( ["+data+"]"; });
        if($cookies.yoyo != "yes")  {

            $scope.isCountView=true;
        }
        else{
            $scope.isCountView=false;
        }
    }

    $scope.Color=function(VacancyType){
        if(VacancyType=='полная занятость'){
            return "<span class='label label-important'><small>полная занятость</small></span>"
        }
        if(VacancyType=='частичная занятость'){
            return "<span class='label label-warning'><small>частичная занятость</small></span>"
        }
        if(VacancyType=='контракт'){
            return  "<span class='label label-info'><small>контракт</small></span>"
        }
        if(VacancyType=='фриланс'){
            return "<span class='label label-success'><small>фриланс</small></span>"
        }
        if(VacancyType==''){}
    }

    // функция получения компаний  =
    $scope.getCompanies=function(){
        $http.get("/v/json/companies").success(function(data){
            $scope.companies=data.children;}).error(function(data,status){
                $scope.alertzone="["+status+"] Ошибка загрузки компаний :( ["+data+"]"; });
    }

    // функция получения компаний с кол-вом вакансий
    $scope.getCompaniesVacancies=function(){
        $http.get("/v/json/comvac").success(function(data){
            $scope.comvac=data.children;
        }).error(function(data,status){
                $scope.alertzone="["+status+"] Ошибка загрузки компаний :( ["+data+"]"; });

    }

    $scope.FilteredByCompany = function(){
        //alert($scope.filterCompany);
    }

    $scope.getVacancies();
    $scope.getCompanies();
    $scope.getCompaniesVacancies();


     /*
    if($cookies.yoyo == "yes"){
        $scope.inc_path="partials/tab_menu.html";
        $scope.isAdminStr="/admin/";
    }
    else
    {
        $scope.inc_path="";
        $scope.isAdminStr="";
    }   */
}
  
function vacancyShowCtrl($scope,$http, $routeParams, $window, $cookies, configProvider, configProviderNA){
    //$scope.$window=$window;
    var vacID = $routeParams.vacID;
    $scope.ref= document.referrer;
    var ref =$scope.ref

    // получим из менеджера конфигурации корневой адрес
    if ($scope.rootURL == undefined && $cookies.login !=undefined){

        configProvider.getURL(function(data){

          // $scope.rootURL = data.URL;
            var imgLink = data.URL+"csp/vacancy/WEB.Image.cls?id="+ vacID+ "&counter=1&ref="+  ref;
            $scope.rootImgPath = imgLink;
            $scope.rootURL = data.URL;
        })
    }

    // если корневой адрес не заполнен - попытаемся получить из неавторизованного доступа
    if ($scope.rootURL==undefined && $cookies.login == undefined){
        //alert("ddd")
        configProviderNA.getURL(function(data){

           // alert(data.URL);
            var imgLink = data.URL+"csp/vacancy/WEB.Image.cls?id="+ vacID+ "&counter=1&ref="+  ref;
            $scope.rootImgPath = imgLink;
            $scope.rootURL = data.URL;
            //return "<img alt='VacancyLogo' align='right' ng-src='imgLink' class='VacancyImg img-rounded pull-right' style='max-width:200px; max-height:300px;'/>"
        })
    }


   // $scope.rootURL="zzz";
   /*
   // получим из менеджера конфигурации корневой адрес
    configProvider.getURL(function(data){
        $scope.rootURL = data.URL;

    })    */

   // $scope.test = httpProvider.get()
 /*
    $scope.test = function(vacID, ref){
        $http.get("/av/json/getsettings2/url").success(function(data){

            $scope.rootURL = data.URL+"csp/vacancy/WEB.Image.cls?id="+ vacID+ "&counter=1&ref="+  ref;
        })
            .error(function(data,status){
                $scope.alertzone="test"; });
    }

   */

     // alert($scope.rootURL);
    //$scope.rootURL = RURL;


    //$scope.imgURL=$scope.rootURL+"csp/vacancy/WEB.Image.cls?id="+ vacID+ "&counter=1&ref="+  $scope.ref;

    $scope.title_text = "TEST";

    $scope.Color=function(VacancyType){
        if(VacancyType=='полная занятость'){
            return "<span class='label label-important'>полная занятость</span>"
        }
        if(VacancyType=='частичная занятость'){
            return "<span class='label label-warning'>частичная занятость</span>"
        }
        if(VacancyType=='контракт'){
            return  "<span class='label label-info'>контракт</span>"
        }
        if(VacancyType=='фриланс'){
            return "<span class='label label-success'>фриланс</span>"
        }
        if(VacancyType==''){}
    }

    $scope.LinkToStr=function(link){

        var temp="";
        for(var i = 0; i < link.length; i++){

            if(i!=link.length-1){
                temp= temp+link[i].URL+" "+link[i].URLName+" ";
            }
            else{
                temp= temp+link[i].URL+" "+link[i].URLName;
            }

        }
        return temp;
    }


    $scope.StrToLink=function(str){

        var arrayObject=new Object();
        var arrayObject={};
// Если объект не пустой
        if (str.length > 0){
            var ArrayLinks=new Array();
            var ArrayLinks=[arrayObject];
        }

        var temp=str.split(' ');
        var k=0;

        for (var i = 0; i < temp.length-1; i+=2 ){
            ArrayLinks[k].URL=temp[i];
            ArrayLinks[k].URLName=temp[i+1];
            k++;
// Не создаём новый объект, если цикл закончился
            if (k!=temp.length/2){
                ArrayLinks.push([{}]);
            }
        }

        return  ArrayLinks;
    }


   // функция показа вакансии
       $scope.showVacancy = function(vacID){
	     $http.get("/v/json/vacancy/"+vacID).success(function(data){
			try	{

				// передаем массив полученных данных в функцию формирования текста
				// выведем результат в соотвествующие поля
				var vac = data.children

				$scope.txtVacancyName = vac[0]["VacancyName"]
                // задаём title
                $window.document.title=$scope.txtVacancyName;
				$scope.txtVacancyCompany = vac[0]["CompanyName"]
                $scope.txtVacancyType = vac[0]["VacancyType"]
				$scope.txtVacancyCity = vac[0]["CityVacancy"]
                $scope.txtVacancyCurrency=  vac[0]["VacancyCurrency"]

				$scope.txtRegDate = vac[0]["RegDate"]

                // образование
                if (vac[0]["EduLevel"] != "") {
				    $scope.txtEduLevel = "<b>Образование: </b> "+vac[0]["EduLevel"]
                }

                $scope.txtStartSalary = vac[0]["StartSalary"]
				$scope.txtEndSalary = vac[0]["EndSalary"]

                $scope.txtMainInfo =vac[0]["MainInfo"]

                // Дополнительная инфа (бонусы)
                if (vac[0]["AddInfo"] != "") {
                    $scope.txtAddInfo = "<b>Бонусы: </b> "+vac[0]["AddInfo"]
                    $scope.txtsoc=  vac[0]["AddInfo"];
                }

                // Основная инфа (требуемые навыки)
                if (vac[0]["Skills"] != "") {
                    $scope.txtSkills = "<b>Необходимые навыки: </b> "+vac[0]["Skills"]
                }
                $scope.txtCompMainInfo = vac[0]["CompMainInfo"]
                $scope.txtCompanyId = vac[0]["compID"]
/*
                $scope.txtCompanyCurency = vac[0]["compID"]
                $scope.txtVacancyCurency = vac[0]["compID"]
*/

                // Она родимая - зарплата
                $scope.isSalary = "";
                //TODO: Удалить нули после точки в End/Start Salary
                if ($scope.txtStartSalary != "" || $scope.txtEndSalary != "") {
                    var a="";
                    var b="";
                    var c="";
                    if ($scope.txtStartSalary !="" ) { a = " от " + $scope.txtStartSalary;}
                    if ($scope.txtEndSalary !="") { b = " до "+ $scope.txtEndSalary;}
                    if ($scope.txtVacancyCurrency !="" && $scope.txtVacancyCurrency !=undefined) { c =" " + $scope.txtVacancyCurrency;}
                      $scope.isSalary = "Зарплата: " + a  + b + c;
                }



                var a=  vac[0].URL;
                $scope.txtLink =$scope.StrToLink(a);
                $scope.otherUrls = "";
                if ($scope.txtLink != null) {$scope.otherUrls = "На других ресурсах";}

                // показываем слой с инфо о вакансии
                $scope.showV=true;
                // скрываем слой с формой ввода отклика
                $scope.showR=false;

			} catch(err){	
			}
			}).error(function(data,status){
			$scope.alertzone="["+status+"] Ошибка загрузки компаний :( ["+data+"]"; });
	   }



    $scope.showVacancy(vacID);
//    $scope.$window.document.title="Вакансия ";

    $scope.vacID = vacID;

	   // добавляем новый отзыв о вакансии
	   $scope.newResponse = function (compid, v){
		    $http.post("/v/json/vacancyresp/"+compid,v)
		    .success(function(data){
                    $scope.alertzone="FirstName:"+v.FirstName;}).error(function(data,status){
			$scope.alertzone="["+status+"] Ошибка добавления отзыва :( ["+data+"]"; });

		    }

      // функция показа/скрытия слоёв с инфо о вакансии и с формой ввода отзыва
       $scope.showResponseForm = function(sh){
           if(sh){
               $scope.showR = true;
               $scope.showV = false;
           } else {
               $scope.showV = true;
               $scope.showR = false;
           }
       }

    /*
           // картинка
    	   $scope.newImage= function (compid, v){
		    $http.post("/av/json/vimage/",compid,v)
		    .success(function(data){
                    $scope.alertzone="FirstName:"+v.FirstName;}).error(function(data,status){
			$scope.alertzone="["+status+"] Ошибка добавления  :( ["+data+"]"; });

		    }
     */

    $scope.showV = true;
    $scope.showR = false;
		    		    
}

function companyCtrl($scope, $http, $routeParams, $window, configProvider){


    // не удалять!!
   /*  configProvider.query(function(data){
        $scope.testconfig = data.children[0]["URL"];
        $scope.testconfig2 = data
    })


    configProvider.getURL(function(data){
         $scope.testconfig2 = data;
    })
    */

    // получим из менеджера конфигурации корневой адрес
    configProvider.getURL(function(data){
        $scope.rootURL = data.URL;
    })

    // это для баяна - он же аккордион - чтобы сворачивать-разворачивать список вакансий
    $scope.isCollapsed = false;

    // получим ИД компании
    var compID = $routeParams.compID;
    // получение  компании по ИД
    $scope.GetCompany=function(compID){
        $http.get("/v/json/company/"+compID).success(function(data){

            $scope.company=data.children;}).error(function(data,status){
                $scope.alertzone="["+status+"] Ошибка загрузки пользователя :( ["+data+"]"; });
    }
    // функция получения вакансий по ИД компании
    $scope.getVacanciesByCompID=function(compID){
        $http.get("/v/json/vacanciesByComp/"+compID).success(function(data){
            $scope.vacancies=data.children;
            $scope.vacCount = data.children[0]["vacCount"]
        }).error(function(data,status){
                $scope.alertzone="["+status+"] Ошибка загрузки компаний :( ["+data+"]"; });
    }

    $scope.getVacanciesByCompID(compID);
    $scope.GetCompany(compID);
    // TODO: change title for company:
    //$window.document.title=$scope.company[0]["Name"];
    $window.document.title="Работодатель";

    $scope.Color=function(VacancyType){
        if(VacancyType=='полная занятость'){
            return "<span class='label label-important'><small>полная занятость</small></span>"
        }
        if(VacancyType=='частичная занятость'){
            return "<span class='label label-warning'><small>частичная занятость</small></span>"
        }
        if(VacancyType=='контракт'){
            return  "<span class='label label-info'><small>контракт</small></span>"
        }
        if(VacancyType=='фриланс'){
            return "<span class='label label-success'><small>фриланс</small></span>"
        }
        if(VacancyType==''){}
    }

}

function CompanyShow($scope,$http,$routeParams, configProvider){
            var compid = $routeParams.compID;
            $scope.companyid  = $routeParams.compID;

            // получим из менеджера конфигурации корневой адрес
            configProvider.getURL(function(data){
                $scope.rootURL = data.URL;
            })


    // получение всех компаний
		    $scope.GetAllCompanys=function(){
       		$http.get("/v/json/getallcompanysr/").success(function(data){
                   $scope.allcompanys=data.children;}).error(function(data,status){
                   $scope.alertzone="["+status+"] Ошибка загрузки пользователей :( ["+data+"]"; });
    		}

		    // получение  компании
		    $scope.GetSystemCompany=function(compid){

       		$http.get("/v/json/getcompanyr/"+compid).success(function(data){

            $scope.company=data.children;}).error(function(data,status){
            $scope.alertzone="["+status+"] Ошибка загрузки пользователя :( ["+data+"]"; });
    		}

    	    // добавляем новой компании
	   		$scope.newCompany = function (v){
		    $http.put("/av/json/createcompanyr/",v)
		    .success(function(data){
                    //alert(v.IsModerated);
                    $scope.alertzone="FirstName:"+v.FirstName;
                    document.location.href = "#admin/companies/";
                })
                .error(function(data,status){
			$scope.alertzone="["+status+"] Ошибка добавления компании :( ["+data+"]"; });

		    }

		     // Обновление компании
	   		$scope.updateCompany = function (compid,v){
		    $http.post("/av/json/companyupdater/"+compid,v)
		    .success(function(data){
                    $scope.alertzone="FirstName:"+v.FirstName;
                    document.location.href = "#admin/companies/";
                }).error(function(data,status){
			    $scope.alertzone="["+status+"] Ошибка добавления компании :( ["+data+"]"; });
                //обновим картинку
                uploadFile('Company',compid,false);
		    }


		    // удаление компании
	    	$scope.deleteCompany = function (compid){


		    $http.delete("/av/json/delcompany/"+compid)
		    .success(function(data){
			    document.location.href = "#admin/companies/";
			    }).error(function(data,status){
			$scope.alertzone="["+status+"] Error delete user :( ["+data+"]"; });
		    }


    $scope.GetAllCompanys();
    //TODO: фейк - надо исправить инит
    $scope.GetSystemCompany($routeParams.compID);
    $scope.alertzone="ZZZ";
}

// Админский контролер для вакансий
function adminVacanciesCtrl ($scope,$http,$routeParams,$window,configProvider){
    $window.document.title="Администрирование вакансий";

    // получим из менеджера конфигурации корневой адрес
    configProvider.getURL(function(data){
        $scope.rootURL = data.URL;
    })

    $scope.LoadCompanyCurrency=function (ID){

        $http.get("/v/json/getcompanyr/"+ID).success(function(data){

            $scope.com=data.children;

            $scope.newvacancy.VacancyCurrency= $scope.com[0].CompanyCurrency;
        }).error(function(data,status){ });

    }

    $scope.Color=function(VacancyType){
        if(VacancyType=='полная занятость'){
            return "<span class='label label-important'>полная занятость</span>"
        }
        if(VacancyType=='частичная занятость'){
            return "<span class='label label-warning'>частичная занятость</span>"
        }
        if(VacancyType=='контракт'){
            return  "<span class='label label-info'>контракт</span>"
        }
        if(VacancyType=='фриланс'){
            return "<span class='label label-success'>фриланс</span>"
        }
        if(VacancyType==''){}
    }


    $scope.LinkToStr=function(link){

        var temp="";
        for(var i = 0; i < link.length; i++){

            if(i!=link.length-1){
            temp= temp+link[i].URL+" "+link[i].URLName+" ";
            }
             else{
            temp= temp+link[i].URL+" "+link[i].URLName;
            }
        }

        return temp;
    }

    $scope.StrToLink=function(str){

        var arrayObject=new Object();
        var arrayObject={};
        var ArrayLinks=new Array();
        var ArrayLinks=[arrayObject];
        var temp=str.split(' ');
        var k=0;

        var len =  temp.length  // кол-во элементов временного массива


        if(len >=2) {
            for (var i = 0; i < len-1; i+=2 ){
                ArrayLinks[k].URL=temp[i];
                ArrayLinks[k].URLName=temp[i+1];

                if(i < len-2)
                { ArrayLinks.push([{}]);  }

                k++;
            }
        }

        return  ArrayLinks;
    }
    // функция получения вакансий
    $scope.getVacancies=function(){
       $http.get("/av/json/vacancies/").success(function(data){
        //    $http.get("/v/json/vacancies").success(function(data){
            $scope.vacancies=data.children;}).error(function(data,status){
                $scope.alertzone="["+status+"] Ошибка загрузки компаний :( ["+data+"]"; });
    }


    var vacID = $routeParams.vacID;
    $scope.vacID= vacID
    // функция получения вакансий
    $scope.getVacancy=function(vacID){
        $http.get("/v/json/vacancy/"+vacID).success(function(data){
            var a=  data.children[0].URL;
            $scope.links =$scope.StrToLink(a);

            $scope.vacancy=data.children;}).error(function(data,status){
            $scope.alertzone="["+status+"] Ошибка загрузки компаний :( ["+data+"]"; });
    }

    $scope.getVacancy(vacID);

    // функция получения компаний
    $scope.getCompanies=function(){
        $http.get("/v/json/companies").success(function(data){
            $scope.companies=data.children;}).error(function(data,status){
                $scope.alertzone="["+status+"] Ошибка загрузки компаний :( ["+data+"]"; });
    }

    // вызовем функцию получения вакансии
    $scope.getVacancies();
    // вызовем функция получения компаний(для фильтра)
    $scope.getCompanies();


    $scope.VacancyUp = function (vacID){
        $http.get("/av/json/VacancyUp/"+vacID).success(function(data){

        }).error(function(data,status){
                $scope.alertzone="["+status+"] Ошибка измения  вакансии :( ["+data+"]"; });


         //window.location.reload();
    }

    // функция клонирования вакансии
    $scope.VacancyClone=function(vacID){

        $http.get("/av/json/clonevacancy/"+vacID).success(function(data){
            // вызовем функцию получения вакансии
            $scope.getVacancies();
           }

        ).error(function(data,status){
                $scope.alertzone="["+status+"] Ошибка загрузки компаний :( ["+data+"]"; });
    }

    $scope.VacancyReverse = function(vacID,ind){

        $http.get("/av/json/vacancyreverse/"+vacID).success(function(data){

            var ss = ! $scope.vacancies[ind].IsActive
            if (ss == true)
            {  $scope.vacancies[ind].IsActive = 1 }
            else
            {  $scope.vacancies[ind].IsActive = 0 }


        }).error(function(data,status){
                $scope.alertzone="["+status+"] Ошибка измения статуса вакансии :( ["+data+"]"; });

    }

    // добавляем обновление ВЫЗЫВАЕМ ЕЁ ТУТ

    $scope.update = function (vacID, v){

        var b=$scope.LinkToStr($scope.links);
         v.URL=b;
        $http.post("/av/json/v/"+vacID,v)
            .success(function(data){$scope.alertzone="Update Ok!"+compid[0].Name;
             document.location.href = "#admin/vacancies/";
            }).error(function(data,status){
                $scope.alertzone="["+status+"]Error update vacancy data:( ["+data+"]"; });

        //обновим картинку
        uploadFile('Vacancy',vacID,false);
        //$scope.alert2="/v/json/vacancy/"+vacancy[0].ID;
    }

    // удаление вакансии
    $scope.deletevacancy = function (vacID){
        $http.delete("/av/json/vacancy/"+vacID)
            .success(function(data){
                document.location.href = "#admin/vacancies/";
            }).error(function(data,status){
                $scope.alertzone="["+status+"] Error delete vacancy :( ["+data+"]"; });
    }

    $scope.createvacancy = function (v){
        var b=$scope.LinkToStr($scope.link);
        //alert(b);
        v.URL=b;

        // что б кашэ был в курсе что мы ему предлагаем
        // company. class="Data.Company";
        $http.post("/av/json/vacancy/",v)
            .success(function(data){ $scope.alertzone="V_Company:"+v.Company;
             document.location.href = "#admin/vacancies/";
            }).error(function(data,status){
                $scope.alertzone="["+status+"] Error creating new vacancy :( ["+data+"]"; });
    }
}

function SystemUserShow($scope,$http,$routeParams){
    var UID = $routeParams.UID;
    $scope.userid = $routeParams.UID;
               /// Запрашиваем логин  проверяем логин
            $scope.LoginVerify=function(login){
                $scope.isLogin="";
                $http.get("/av/json/getlogin/"+login).success(function(data){
                    $scope.CLogin=data.children;
                    if($scope.CLogin[0].Login!=""){
                       // alert("Введите уникальный Login");
                        $scope.isLogin="Login занят";
                    }
                }).error(function(data,status){});
            }





		    // получение всех пользователей
		    $scope.GetAllSystemUsers=function(){
       		$http.get("/av/json/getallusers/").success(function(data){

            $scope.allusers=data.children;}).error(function(data,status){
            $scope.alertzone="["+status+"] Ошибка загрузки пользователей :( ["+data+"]"; });
    		}

		    // получение  пользователя
		    $scope.GetSystemUser=function(compid){
       		$http.get("/av/json/getuser/"+compid).success(function(data){

            $scope.user=data.children;}).error(function(data,status){
            $scope.alertzone="["+status+"] Ошибка загрузки пользователя :( ["+data+"]"; });
    		}

    	   // добавляем нового пользователя
	   		$scope.newuser = function (v){
		    $http.put("/av/json/createuser/",v)
		    .success(function(data){
                    $scope.alertzone="FirstName:"+v.FirstName;
                    document.location.href = "#admin/users/";
                }).error(function(data,status){
			$scope.alertzone="["+status+"] Ошибка добавления пользователя :( ["+data+"]"; });

		    }

		     // Обновление пользователя
	   		$scope.updateuser = function (compid,v){
		    $http.post("/av/json/updateteuser/"+compid,v)
		    .success(function(data){
                    $scope.alertzone="FirstName:"+v.FirstName;
                    //document.location.href = "#admin/users/";
                    document.location.reload();
                }).error(function(data,status){
			$scope.alertzone="["+status+"] Ошибка добавления пользователя :( ["+data+"]"; });

		    }

		    // удаление пользователя
	    	$scope.deleteuser = function (compid){
		    $http.delete("/av/json/deleteuser/"+compid)
		    .success(function(data){
                    $scope.alertzone="deleted";
                    document.location.href = "#admin/users/";
			    }).error(function(data,status){
			$scope.alertzone="["+status+"] Error delete user :( ["+data+"]"; });
		    }


    $scope.GetAllSystemUsers();
    //TODO: убить когда инит станет отрабатывать:
    $scope.GetSystemUser(UID);
}

// TODO: почистить серые контролы
function authCtrl($scope, $http, $cookies){
    /// Авторизация через Cookies
    $scope.isLoad=function(){

        $scope.authVerifyCookie = function (l){
            $http.get("/v/json/authVerifyCookie/"+l)
                .success(function(data){
                    $scope.CookieStatus=data.children;
                    $scope.Status=$scope.CookieStatus[0].Status;

                    if ($scope.Status=="0"){
                        setCookie("CookieSession",null,{expires:-1, path:"/"});
                        setCookie("login",null,{expires:-1, path:"/csp/vacancy"});
                    }
                    else{
                        $scope.fname=$cookies.login;
                        $scope.showAF = false;
                        $scope.showAG = true;
                    }
                }).error(function(data,status){});
        }

        if($cookies.CookieSession!=null && $cookies.CookieSession!="" && $cookies.CookieSession!="undefined " ){
            $scope.authVerifyCookie($cookies.CookieSession);
        }
        else{}


    }

    $scope.isLoad();


    //здесь проверка на админственность

	// функция аутентификации - считываем данные из БД - возвращаем результат
    $scope.authVerify=function(){
        $http.get("/v/json/authVerify/"+$scope.authLogin+"/"+$scope.authPassword)
            .success(function(data){
                var fName;
                try {
                    // пробуем считать результат
                    fName = data.children[0]["FirstName"];
                   // var fName = $cookies.login;
                    $scope.fname =fName;
                    $scope.showAF = false;
                    $scope.showAG = true;

                    // очистим поля ввода
                    $scope.authLogin = "";
                    $scope.authPassword = "";
                }  catch (err) {

                    // если не удалось считать - значит ошибка входа
                    if(fName  = "undefined")
                    {
                        alert("Неправильно введен логин/пароль. Повторите ввод","Ошибка аутентификации");
                        $scope.authLogin = "";
                        $scope.authPassword = "";
                    }
                }
            })
            .error(function(data,status){
            $scope.alertzone="["+status+"] Ошибка загрузки :( ["+data+"]"; });
        //document.location.href = "";
    }

    // функция показа/скрытия слоёв с формой аутентификации / формой приветствия
    $scope.showAuthForm = function(sh){

        if(sh){
            $scope.showAF = true;
            $scope.showAG = false;
        } else {
            $scope.showAF = false;
            $scope.showAG = true;
        }
    }

    // функция разлогинивания
    $scope.logout = function(){
        var c=$cookies.CookieSession;
        $http.post("/v/json/LoginOut/"+c).success(function(data){
        }).error(function(data,status){});
        setCookie("CookieSession",null,{expires:-1, path:"/"});
        setCookie("login",null,{expires:-1, path:"/csp/vacancy"});
        window.location.reload();

    }

    // функция проверки кукисов
    $scope.cookiesVerify = function(){
        var login = $cookies.login;
        if(login == null || login==""){
            $scope.showAuthForm(true);
          //  $cookies.yoyo = "no";
        }
        else {
            $scope.showAuthForm(false);
            $scope.fname = login;
          //  $cookies.yoyo = "yes";
        }

    }

    $scope.cookiesVerify();


}

function vrShow($scope, $http, $routeParams){

    var vacID = $routeParams.vacID;





    $scope.deletevr = function (vrid){
        $http.delete("/av/json/deletevacancyresp/"+vrid)
            .success(function(data){
                $scope.alertzone="deleted";
                document.location.href = "#admin/responses/";
            }).error(function(data,status){
                $scope.alertzone="["+status+"] Error delete vacancy rsponse :( ["+data+"]"; });
    }



    $scope.RM = function (vrid){
        //$scope.alertzone="test" + vrid;
        $http.post("/av/json/redirectmail/"+vrid)
            .success(function(data){
                document.location.href = "#admin/responses/";
            }).error(function(data,status){
                $scope.alertzone="["+status+"] Ошибка отправления почты :( ["+data+"]";
            });

    }
        // получение  отзывов
    $scope.showVacancyResp = function(vacID){
        var addToQuery="";
        if ($routeParams.vacID !=null) {
            addToQuery="/"+vacID;
        }

        $scope.alertzone=addToQuery;
        $http.get("/av/json/getvacancyresp"+addToQuery).success(function(data){
        $scope.vacresp=data.children;}).error(function(data,status){
        $scope.alertzone="["+status+"] Ошибка загрузки отзывов :( ["+data+"]"; });
        }

    $scope.showVacancyResp(vacID);
    $scope.vacID = vacID;
    }

// вывод всех пользователей
function adminUsersCtrl ($scope, $http, $routeParams){

}
// работа с Пользователем
function adminUserCtrl ($scope, $http, $routeParams){

}
// вывод всех компаний
function adminCompaniesCtrl ($scope, $http, $routeParams){

}
// работа с компанией
function adminCompanyCtrl ($scope,$cookies ){


}

//здесь проверка на админственность
function adminCtrl (path){
    // возвращает   Cookie
    function getCookie(name)
        {
        var matches = document.cookie.match(new RegExp(
        "(?:^|; )" + name.replace(/([\.$?*|{}\(\)\[\]\\\/\+^])/g, '\\$1') + "=([^;]*)"));
        return matches ? decodeURIComponent(matches[1]) : "";
        }
     //
    if(getCookie('login')!=""){return path;} else {return '/vacancies';}

}

// уcтанавливает cookie
function setCookie(name, value, props) {
    props = props || {}
    var exp = props.expires
    if (typeof exp == "number" && exp) {
        var d = new Date()
        d.setTime(d.getTime() + exp*1000)
        exp = props.expires = d
    }
    if(exp && exp.toUTCString) { props.expires = exp.toUTCString() }
    value = encodeURIComponent(value)
    var updatedCookie = name + "=" + value
    for(var propName in props){
        updatedCookie += "; " + propName
        var propValue = props[propName]
        if(propValue !== true){ updatedCookie += "=" + propValue }
    }

    document.cookie = updatedCookie
}

// удаляет cookie
function deleteCookie(name) {
    setCookie(name, null, { expires: -1 })
}

]]></CSP>
</Export>
